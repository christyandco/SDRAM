
SDRAM_MEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028cc  080028cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080028cc  080028cc  000128cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028d4  080028d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028d4  080028d4  000128d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028d8  080028d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008070  2000000c  080028e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000807c  080028e8  0002807c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dfe  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177b  00000000  00000000  00027e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  000295b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000600  00000000  00000000  00029c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259d0  00000000  00000000  0002a280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e9d  00000000  00000000  0004fc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e73ed  00000000  00000000  00057aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013eeda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a00  00000000  00000000  0013ef2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080028a4 	.word	0x080028a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080028a4 	.word	0x080028a4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000510:	f3bf 8f4f 	dsb	sy
}
 8000514:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000516:	f3bf 8f6f 	isb	sy
}
 800051a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <SCB_EnableICache+0x48>)
 800051e:	2200      	movs	r2, #0
 8000520:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000524:	f3bf 8f4f 	dsb	sy
}
 8000528:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800052a:	f3bf 8f6f 	isb	sy
}
 800052e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <SCB_EnableICache+0x48>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <SCB_EnableICache+0x48>)
 8000536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800053c:	f3bf 8f4f 	dsb	sy
}
 8000540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000542:	f3bf 8f6f 	isb	sy
}
 8000546:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SCB_EnableDCache+0x84>)
 8000560:	2200      	movs	r2, #0
 8000562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000566:	f3bf 8f4f 	dsb	sy
}
 800056a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <SCB_EnableDCache+0x84>)
 800056e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000572:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	0b5b      	lsrs	r3, r3, #13
 8000578:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800057c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	08db      	lsrs	r3, r3, #3
 8000582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000586:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	015a      	lsls	r2, r3, #5
 800058c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000590:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000596:	4911      	ldr	r1, [pc, #68]	; (80005dc <SCB_EnableDCache+0x84>)
 8000598:	4313      	orrs	r3, r2
 800059a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	1e5a      	subs	r2, r3, #1
 80005a2:	60ba      	str	r2, [r7, #8]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1ef      	bne.n	8000588 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	60fa      	str	r2, [r7, #12]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1e5      	bne.n	800057e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005b2:	f3bf 8f4f 	dsb	sy
}
 80005b6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <SCB_EnableDCache+0x84>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <SCB_EnableDCache+0x84>)
 80005be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c4:	f3bf 8f4f 	dsb	sy
}
 80005c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ca:	f3bf 8f6f 	isb	sy
}
 80005ce:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80005e4:	f7ff ff92 	bl	800050c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80005e8:	f7ff ffb6 	bl	8000558 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 ffc7 	bl	800157e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f884 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f95e 	bl	80008b4 <MX_GPIO_Init>
  MX_FMC_Init();
 80005f8:	f000 f8ee 	bl	80007d8 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  Fill_Buffer(wdata,BUFFER_SIZE,0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000602:	4829      	ldr	r0, [pc, #164]	; (80006a8 <main+0xc8>)
 8000604:	f000 f858 	bl	80006b8 <Fill_Buffer>



  	  for(uwIndex=0;uwIndex < BUFFER_SIZE;uwIndex++)
 8000608:	4b28      	ldr	r3, [pc, #160]	; (80006ac <main+0xcc>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	e00c      	b.n	800062a <main+0x4a>
  	   	     {
  		  	  memcpy((uint32_t *) SDRAM_ADD, wdata, uwIndex);
 8000610:	4b26      	ldr	r3, [pc, #152]	; (80006ac <main+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4924      	ldr	r1, [pc, #144]	; (80006a8 <main+0xc8>)
 8000618:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 800061c:	f002 f92c 	bl	8002878 <memcpy>
  	  for(uwIndex=0;uwIndex < BUFFER_SIZE;uwIndex++)
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <main+0xcc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	4a21      	ldr	r2, [pc, #132]	; (80006ac <main+0xcc>)
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <main+0xcc>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000632:	d3ed      	bcc.n	8000610 <main+0x30>
  	   	      }

  	   	      //READ DATA FROM SDARM MEMORY
  	  for(uwIndex=0;uwIndex < BUFFER_SIZE;uwIndex++)
 8000634:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <main+0xcc>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	e00c      	b.n	8000656 <main+0x76>
  	   	   {
  	   	       memcpy(rdata, (uint32_t *) SDRAM_ADD, uwIndex);
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <main+0xcc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <main+0xd0>)
 8000648:	f002 f916 	bl	8002878 <memcpy>
  	  for(uwIndex=0;uwIndex < BUFFER_SIZE;uwIndex++)
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <main+0xcc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <main+0xcc>)
 8000654:	6013      	str	r3, [r2, #0]
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <main+0xcc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800065e:	d3ed      	bcc.n	800063c <main+0x5c>
  	   	    }
  	   	      		//checking data integrity
  	  for(uwIndex=0;(uwIndex < BUFFER_SIZE) && uwWriteReadStatus==0;uwIndex++)
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <main+0xcc>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	e015      	b.n	8000694 <main+0xb4>
  	   	    {
  	   	      if(rdata[uwIndex]!=wdata[uwIndex])
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <main+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <main+0xd0>)
 800066e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <main+0xcc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	490c      	ldr	r1, [pc, #48]	; (80006a8 <main+0xc8>)
 8000678:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800067c:	429a      	cmp	r2, r3
 800067e:	d004      	beq.n	800068a <main+0xaa>
  	   	      	{
  	   	      		uwWriteReadStatus++;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <main+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <main+0xd4>)
 8000688:	6013      	str	r3, [r2, #0]
  	  for(uwIndex=0;(uwIndex < BUFFER_SIZE) && uwWriteReadStatus==0;uwIndex++)
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <main+0xcc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <main+0xcc>)
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <main+0xcc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800069c:	d203      	bcs.n	80006a6 <main+0xc6>
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <main+0xd4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0e0      	beq.n	8000668 <main+0x88>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0xc6>
 80006a8:	2000005c 	.word	0x2000005c
 80006ac:	20008060 	.word	0x20008060
 80006b0:	2000405c 	.word	0x2000405c
 80006b4:	2000805c 	.word	0x2000805c

080006b8 <Fill_Buffer>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

static void Fill_Buffer(uint32_t *pBuffer,uint32_t uwBufferLength,uint32_t uwOffset){
 80006b8:	b480      	push	{r7}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	uint32_t tmpIndex=0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
	for(tmpIndex=0;tmpIndex < uwBufferLength;tmpIndex++){
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e00a      	b.n	80006e4 <Fill_Buffer+0x2c>
		pBuffer[tmpIndex]=tmpIndex+uwOffset;
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	4413      	add	r3, r2
 80006d6:	6979      	ldr	r1, [r7, #20]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	440a      	add	r2, r1
 80006dc:	601a      	str	r2, [r3, #0]
	for(tmpIndex=0;tmpIndex < uwBufferLength;tmpIndex++){
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	3301      	adds	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d3f0      	bcc.n	80006ce <Fill_Buffer+0x16>
	}

}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	371c      	adds	r7, #28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
	...

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f002 f8c2 	bl	8002894 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <SystemClock_Config+0xd4>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a2a      	ldr	r2, [pc, #168]	; (80007d0 <SystemClock_Config+0xd4>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <SystemClock_Config+0xd4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <SystemClock_Config+0xd8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a25      	ldr	r2, [pc, #148]	; (80007d4 <SystemClock_Config+0xd8>)
 800073e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <SystemClock_Config+0xd8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000750:	2301      	movs	r3, #1
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000764:	2319      	movs	r3, #25
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000768:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800076c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fa58 	bl	8001c30 <HAL_RCC_OscConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000786:	f000 fcc7 	bl	8001118 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800078a:	f001 fa01 	bl	8001b90 <HAL_PWREx_EnableOverDrive>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000794:	f000 fcc0 	bl	8001118 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2107      	movs	r1, #7
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fcde 	bl	8002178 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007c2:	f000 fca9 	bl	8001118 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	; 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b090      	sub	sp, #64	; 0x40
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80007f2:	4b2e      	ldr	r3, [pc, #184]	; (80008ac <MX_FMC_Init+0xd4>)
 80007f4:	4a2e      	ldr	r2, [pc, #184]	; (80008b0 <MX_FMC_Init+0xd8>)
 80007f6:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80007f8:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <MX_FMC_Init+0xd4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <MX_FMC_Init+0xd4>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000804:	4b29      	ldr	r3, [pc, #164]	; (80008ac <MX_FMC_Init+0xd4>)
 8000806:	2204      	movs	r2, #4
 8000808:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800080a:	4b28      	ldr	r3, [pc, #160]	; (80008ac <MX_FMC_Init+0xd4>)
 800080c:	2210      	movs	r2, #16
 800080e:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <MX_FMC_Init+0xd4>)
 8000812:	2240      	movs	r2, #64	; 0x40
 8000814:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <MX_FMC_Init+0xd4>)
 8000818:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800081c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <MX_FMC_Init+0xd4>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000824:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_FMC_Init+0xd4>)
 8000826:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800082a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_FMC_Init+0xd4>)
 800082e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_FMC_Init+0xd4>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 800083e:	2307      	movs	r3, #7
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 4;
 8000842:	2304      	movs	r3, #4
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 7;
 8000846:	2307      	movs	r3, #7
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 3;
 800084a:	2303      	movs	r3, #3
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 2;
 8000852:	2302      	movs	r3, #2
 8000854:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <MX_FMC_Init+0xd4>)
 800085e:	f001 fe3d 	bl	80024dc <HAL_SDRAM_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000868:	f000 fc56 	bl	8001118 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  MT48LC4M32B2_Context_t MT48LC4M32B2;
  MT48LC4M32B2.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK1;  // changeable
 800086c:	2310      	movs	r3, #16
 800086e:	607b      	str	r3, [r7, #4]
  MT48LC4M32B2.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8000870:	2303      	movs	r3, #3
 8000872:	60bb      	str	r3, [r7, #8]
  MT48LC4M32B2.RefreshRate     = REFRESH_COUNT;
 8000874:	f240 6303 	movw	r3, #1539	; 0x603
 8000878:	60fb      	str	r3, [r7, #12]
  MT48LC4M32B2.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  MT48LC4M32B2.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  MT48LC4M32B2.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;   // changeable
 8000882:	2330      	movs	r3, #48	; 0x30
 8000884:	61bb      	str	r3, [r7, #24]
  MT48LC4M32B2.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  MT48LC4M32B2.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800088a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800088e:	623b      	str	r3, [r7, #32]

  if (MT48LC4M32B2_Init(&hsdram1, &MT48LC4M32B2)!=MT48LC4M32B2_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_FMC_Init+0xd4>)
 8000896:	f000 fc44 	bl	8001122 <MT48LC4M32B2_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_FMC_Init+0xcc>
  {
	  Error_Handler();
 80008a0:	f000 fc3a 	bl	8001118 <Error_Handler>
  }

  /* USER CODE END FMC_Init 2 */
}
 80008a4:	bf00      	nop
 80008a6:	3740      	adds	r7, #64	; 0x40
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000028 	.word	0x20000028
 80008b0:	a0000140 	.word	0xa0000140

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b090      	sub	sp, #64	; 0x40
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ca:	4bad      	ldr	r3, [pc, #692]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4aac      	ldr	r2, [pc, #688]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4baa      	ldr	r3, [pc, #680]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0310 	and.w	r3, r3, #16
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
 80008e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	4ba7      	ldr	r3, [pc, #668]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4aa6      	ldr	r2, [pc, #664]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4ba4      	ldr	r3, [pc, #656]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4ba1      	ldr	r3, [pc, #644]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4aa0      	ldr	r2, [pc, #640]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b9e      	ldr	r3, [pc, #632]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	623b      	str	r3, [r7, #32]
 8000910:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	4b9b      	ldr	r3, [pc, #620]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a9a      	ldr	r2, [pc, #616]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000918:	f043 0308 	orr.w	r3, r3, #8
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b98      	ldr	r3, [pc, #608]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	61fb      	str	r3, [r7, #28]
 8000928:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b95      	ldr	r3, [pc, #596]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a94      	ldr	r2, [pc, #592]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b92      	ldr	r3, [pc, #584]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b8f      	ldr	r3, [pc, #572]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a8e      	ldr	r2, [pc, #568]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b8c      	ldr	r3, [pc, #560]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800095a:	4b89      	ldr	r3, [pc, #548]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a88      	ldr	r2, [pc, #544]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000960:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b86      	ldr	r3, [pc, #536]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000972:	4b83      	ldr	r3, [pc, #524]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a82      	ldr	r2, [pc, #520]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b80      	ldr	r3, [pc, #512]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800098a:	4b7d      	ldr	r3, [pc, #500]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a7c      	ldr	r2, [pc, #496]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000990:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b7a      	ldr	r3, [pc, #488]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009a2:	4b77      	ldr	r3, [pc, #476]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a76      	ldr	r2, [pc, #472]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80009a8:	f043 0320 	orr.w	r3, r3, #32
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b74      	ldr	r3, [pc, #464]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0320 	and.w	r3, r3, #32
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ba:	4b71      	ldr	r3, [pc, #452]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a70      	ldr	r2, [pc, #448]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b6e      	ldr	r3, [pc, #440]	; (8000b80 <MX_GPIO_Init+0x2cc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2120      	movs	r1, #32
 80009d6:	486b      	ldr	r0, [pc, #428]	; (8000b84 <MX_GPIO_Init+0x2d0>)
 80009d8:	f001 f8c0 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f241 010c 	movw	r1, #4108	; 0x100c
 80009e2:	4869      	ldr	r0, [pc, #420]	; (8000b88 <MX_GPIO_Init+0x2d4>)
 80009e4:	f001 f8ba 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2108      	movs	r1, #8
 80009ec:	4867      	ldr	r0, [pc, #412]	; (8000b8c <MX_GPIO_Init+0x2d8>)
 80009ee:	f001 f8b5 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f8:	4865      	ldr	r0, [pc, #404]	; (8000b90 <MX_GPIO_Init+0x2dc>)
 80009fa:	f001 f8af 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	21c8      	movs	r1, #200	; 0xc8
 8000a02:	4864      	ldr	r0, [pc, #400]	; (8000b94 <MX_GPIO_Init+0x2e0>)
 8000a04:	f001 f8aa 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000a08:	2310      	movs	r3, #16
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a18:	230e      	movs	r3, #14
 8000a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a20:	4619      	mov	r1, r3
 8000a22:	485d      	ldr	r0, [pc, #372]	; (8000b98 <MX_GPIO_Init+0x2e4>)
 8000a24:	f000 feee 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4857      	ldr	r0, [pc, #348]	; (8000b98 <MX_GPIO_Init+0x2e4>)
 8000a3c:	f000 fee2 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000a40:	2304      	movs	r3, #4
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a50:	2309      	movs	r3, #9
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a58:	4619      	mov	r1, r3
 8000a5a:	484f      	ldr	r0, [pc, #316]	; (8000b98 <MX_GPIO_Init+0x2e4>)
 8000a5c:	f000 fed2 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000a60:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a72:	230b      	movs	r3, #11
 8000a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4845      	ldr	r0, [pc, #276]	; (8000b94 <MX_GPIO_Init+0x2e0>)
 8000a7e:	f000 fec1 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000a82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a88:	2312      	movs	r3, #18
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a94:	2304      	movs	r3, #4
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	483f      	ldr	r0, [pc, #252]	; (8000b9c <MX_GPIO_Init+0x2e8>)
 8000aa0:	f000 feb0 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000aa4:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4836      	ldr	r0, [pc, #216]	; (8000b9c <MX_GPIO_Init+0x2e8>)
 8000ac2:	f000 fe9f 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ade:	4619      	mov	r1, r3
 8000ae0:	482e      	ldr	r0, [pc, #184]	; (8000b9c <MX_GPIO_Init+0x2e8>)
 8000ae2:	f000 fe8f 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000af6:	2308      	movs	r3, #8
 8000af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	4820      	ldr	r0, [pc, #128]	; (8000b84 <MX_GPIO_Init+0x2d0>)
 8000b02:	f000 fe7f 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000b06:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	481f      	ldr	r0, [pc, #124]	; (8000ba0 <MX_GPIO_Init+0x2ec>)
 8000b24:	f000 fe6e 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b42:	4619      	mov	r1, r3
 8000b44:	4817      	ldr	r0, [pc, #92]	; (8000ba4 <MX_GPIO_Init+0x2f0>)
 8000b46:	f000 fe5d 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000b4a:	2360      	movs	r3, #96	; 0x60
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b5a:	230d      	movs	r3, #13
 8000b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b62:	4619      	mov	r1, r3
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <MX_GPIO_Init+0x2e4>)
 8000b66:	f000 fe4d 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b7e:	e013      	b.n	8000ba8 <MX_GPIO_Init+0x2f4>
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	40022000 	.word	0x40022000
 8000b8c:	40022800 	.word	0x40022800
 8000b90:	40021c00 	.word	0x40021c00
 8000b94:	40021800 	.word	0x40021800
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020000 	.word	0x40020000
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bac:	4619      	mov	r1, r3
 8000bae:	48bc      	ldr	r0, [pc, #752]	; (8000ea0 <MX_GPIO_Init+0x5ec>)
 8000bb0:	f000 fe28 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000bb4:	2340      	movs	r3, #64	; 0x40
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	48b4      	ldr	r0, [pc, #720]	; (8000ea0 <MX_GPIO_Init+0x5ec>)
 8000bd0:	f000 fe18 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000bd4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000be6:	230e      	movs	r3, #14
 8000be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bee:	4619      	mov	r1, r3
 8000bf0:	48ac      	ldr	r0, [pc, #688]	; (8000ea4 <MX_GPIO_Init+0x5f0>)
 8000bf2:	f000 fe07 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c08:	4619      	mov	r1, r3
 8000c0a:	48a6      	ldr	r0, [pc, #664]	; (8000ea4 <MX_GPIO_Init+0x5f0>)
 8000c0c:	f000 fdfa 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000c10:	2340      	movs	r3, #64	; 0x40
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c14:	4ba4      	ldr	r3, [pc, #656]	; (8000ea8 <MX_GPIO_Init+0x5f4>)
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c20:	4619      	mov	r1, r3
 8000c22:	48a2      	ldr	r0, [pc, #648]	; (8000eac <MX_GPIO_Init+0x5f8>)
 8000c24:	f000 fdee 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000c28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c3a:	230a      	movs	r3, #10
 8000c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c42:	4619      	mov	r1, r3
 8000c44:	489a      	ldr	r0, [pc, #616]	; (8000eb0 <MX_GPIO_Init+0x5fc>)
 8000c46:	f000 fddd 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000c4a:	23f0      	movs	r3, #240	; 0xf0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000c5a:	230a      	movs	r3, #10
 8000c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	4893      	ldr	r0, [pc, #588]	; (8000eb4 <MX_GPIO_Init+0x600>)
 8000c66:	f000 fdcd 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000c6a:	23f7      	movs	r3, #247	; 0xf7
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c7a:	230e      	movs	r3, #14
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c82:	4619      	mov	r1, r3
 8000c84:	488c      	ldr	r0, [pc, #560]	; (8000eb8 <MX_GPIO_Init+0x604>)
 8000c86:	f000 fdbd 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c9c:	2309      	movs	r3, #9
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4885      	ldr	r0, [pc, #532]	; (8000ebc <MX_GPIO_Init+0x608>)
 8000ca8:	f000 fdac 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000cbe:	230a      	movs	r3, #10
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	487c      	ldr	r0, [pc, #496]	; (8000ebc <MX_GPIO_Init+0x608>)
 8000cca:	f000 fd9b 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4871      	ldr	r0, [pc, #452]	; (8000eac <MX_GPIO_Init+0x5f8>)
 8000ce6:	f000 fd8d 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000cea:	2308      	movs	r3, #8
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cfa:	230d      	movs	r3, #13
 8000cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d02:	4619      	mov	r1, r3
 8000d04:	4869      	ldr	r0, [pc, #420]	; (8000eac <MX_GPIO_Init+0x5f8>)
 8000d06:	f000 fd7d 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000d0a:	f241 030c 	movw	r3, #4108	; 0x100c
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d20:	4619      	mov	r1, r3
 8000d22:	4864      	ldr	r0, [pc, #400]	; (8000eb4 <MX_GPIO_Init+0x600>)
 8000d24:	f000 fd6e 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4860      	ldr	r0, [pc, #384]	; (8000ec0 <MX_GPIO_Init+0x60c>)
 8000d3e:	f000 fd61 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000d42:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d54:	230e      	movs	r3, #14
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4855      	ldr	r0, [pc, #340]	; (8000eb4 <MX_GPIO_Init+0x600>)
 8000d60:	f000 fd50 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000d64:	2308      	movs	r3, #8
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	484f      	ldr	r0, [pc, #316]	; (8000eb8 <MX_GPIO_Init+0x604>)
 8000d7c:	f000 fd42 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d92:	230d      	movs	r3, #13
 8000d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4847      	ldr	r0, [pc, #284]	; (8000ebc <MX_GPIO_Init+0x608>)
 8000d9e:	f000 fd31 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000da2:	2310      	movs	r3, #16
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db2:	4619      	mov	r1, r3
 8000db4:	483d      	ldr	r0, [pc, #244]	; (8000eac <MX_GPIO_Init+0x5f8>)
 8000db6:	f000 fd25 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4835      	ldr	r0, [pc, #212]	; (8000eac <MX_GPIO_Init+0x5f8>)
 8000dd6:	f000 fd15 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000dda:	f248 0304 	movw	r3, #32772	; 0x8004
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4835      	ldr	r0, [pc, #212]	; (8000ec4 <MX_GPIO_Init+0x610>)
 8000df0:	f000 fd08 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000df4:	2302      	movs	r3, #2
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e04:	2305      	movs	r3, #5
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4829      	ldr	r0, [pc, #164]	; (8000eb4 <MX_GPIO_Init+0x600>)
 8000e10:	f000 fcf8 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4825      	ldr	r0, [pc, #148]	; (8000ec4 <MX_GPIO_Init+0x610>)
 8000e2e:	f000 fce9 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000e32:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e44:	230d      	movs	r3, #13
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	481d      	ldr	r0, [pc, #116]	; (8000ec4 <MX_GPIO_Init+0x610>)
 8000e50:	f000 fcd8 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000e54:	2301      	movs	r3, #1
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e64:	2302      	movs	r3, #2
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <MX_GPIO_Init+0x600>)
 8000e70:	f000 fcc8 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e86:	2307      	movs	r3, #7
 8000e88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_GPIO_Init+0x5fc>)
 8000e92:	f000 fcb7 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e9c:	e014      	b.n	8000ec8 <MX_GPIO_Init+0x614>
 8000e9e:	bf00      	nop
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40022400 	.word	0x40022400
 8000ea8:	10120000 	.word	0x10120000
 8000eac:	40020c00 	.word	0x40020c00
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40022000 	.word	0x40022000
 8000eb8:	40022800 	.word	0x40022800
 8000ebc:	40021800 	.word	0x40021800
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40021c00 	.word	0x40021c00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000edc:	4619      	mov	r1, r3
 8000ede:	4885      	ldr	r0, [pc, #532]	; (80010f4 <MX_GPIO_Init+0x840>)
 8000ee0:	f000 fc90 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000eea:	4b83      	ldr	r3, [pc, #524]	; (80010f8 <MX_GPIO_Init+0x844>)
 8000eec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4880      	ldr	r0, [pc, #512]	; (80010fc <MX_GPIO_Init+0x848>)
 8000efa:	f000 fc83 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000efe:	23c0      	movs	r3, #192	; 0xc0
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000f0e:	2308      	movs	r3, #8
 8000f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	4879      	ldr	r0, [pc, #484]	; (8001100 <MX_GPIO_Init+0x84c>)
 8000f1a:	f000 fc73 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000f1e:	2310      	movs	r3, #16
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f2e:	230a      	movs	r3, #10
 8000f30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f36:	4619      	mov	r1, r3
 8000f38:	4872      	ldr	r0, [pc, #456]	; (8001104 <MX_GPIO_Init+0x850>)
 8000f3a:	f000 fc63 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000f3e:	23c8      	movs	r3, #200	; 0xc8
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f52:	4619      	mov	r1, r3
 8000f54:	486c      	ldr	r0, [pc, #432]	; (8001108 <MX_GPIO_Init+0x854>)
 8000f56:	f000 fc55 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000f5a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f60:	2303      	movs	r3, #3
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4867      	ldr	r0, [pc, #412]	; (800110c <MX_GPIO_Init+0x858>)
 8000f70:	f000 fc48 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000f74:	2305      	movs	r3, #5
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f84:	230a      	movs	r3, #10
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	485c      	ldr	r0, [pc, #368]	; (8001100 <MX_GPIO_Init+0x84c>)
 8000f90:	f000 fc38 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f94:	2332      	movs	r3, #50	; 0x32
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fa4:	230b      	movs	r3, #11
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fac:	4619      	mov	r1, r3
 8000fae:	4854      	ldr	r0, [pc, #336]	; (8001100 <MX_GPIO_Init+0x84c>)
 8000fb0:	f000 fc28 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fc4:	2309      	movs	r3, #9
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4850      	ldr	r0, [pc, #320]	; (8001110 <MX_GPIO_Init+0x85c>)
 8000fd0:	f000 fc18 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000fd4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fe6:	2309      	movs	r3, #9
 8000fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4848      	ldr	r0, [pc, #288]	; (8001114 <MX_GPIO_Init+0x860>)
 8000ff2:	f000 fc07 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001006:	4619      	mov	r1, r3
 8001008:	483f      	ldr	r0, [pc, #252]	; (8001108 <MX_GPIO_Init+0x854>)
 800100a:	f000 fbfb 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800100e:	2386      	movs	r3, #134	; 0x86
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800101e:	230b      	movs	r3, #11
 8001020:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001026:	4619      	mov	r1, r3
 8001028:	4832      	ldr	r0, [pc, #200]	; (80010f4 <MX_GPIO_Init+0x840>)
 800102a:	f000 fbeb 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800102e:	2301      	movs	r3, #1
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001032:	2303      	movs	r3, #3
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103e:	4619      	mov	r1, r3
 8001040:	482c      	ldr	r0, [pc, #176]	; (80010f4 <MX_GPIO_Init+0x840>)
 8001042:	f000 fbdf 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001046:	2350      	movs	r3, #80	; 0x50
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001056:	230d      	movs	r3, #13
 8001058:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105e:	4619      	mov	r1, r3
 8001060:	4824      	ldr	r0, [pc, #144]	; (80010f4 <MX_GPIO_Init+0x840>)
 8001062:	f000 fbcf 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001066:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106c:	2312      	movs	r3, #18
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001078:	2304      	movs	r3, #4
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800107c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001080:	4619      	mov	r1, r3
 8001082:	4820      	ldr	r0, [pc, #128]	; (8001104 <MX_GPIO_Init+0x850>)
 8001084:	f000 fbbe 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001088:	2328      	movs	r3, #40	; 0x28
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001098:	230a      	movs	r3, #10
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a0:	4619      	mov	r1, r3
 80010a2:	4814      	ldr	r0, [pc, #80]	; (80010f4 <MX_GPIO_Init+0x840>)
 80010a4:	f000 fbae 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80010a8:	2340      	movs	r3, #64	; 0x40
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80010b8:	2309      	movs	r3, #9
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c0:	4619      	mov	r1, r3
 80010c2:	4810      	ldr	r0, [pc, #64]	; (8001104 <MX_GPIO_Init+0x850>)
 80010c4:	f000 fb9e 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80010c8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010da:	2305      	movs	r3, #5
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e2:	4619      	mov	r1, r3
 80010e4:	480a      	ldr	r0, [pc, #40]	; (8001110 <MX_GPIO_Init+0x85c>)
 80010e6:	f000 fb8d 	bl	8001804 <HAL_GPIO_Init>

}
 80010ea:	bf00      	nop
 80010ec:	3740      	adds	r7, #64	; 0x40
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40020000 	.word	0x40020000
 80010f8:	10120000 	.word	0x10120000
 80010fc:	40022000 	.word	0x40022000
 8001100:	40020800 	.word	0x40020800
 8001104:	40021c00 	.word	0x40021c00
 8001108:	40021800 	.word	0x40021800
 800110c:	40021400 	.word	0x40021400
 8001110:	40020400 	.word	0x40020400
 8001114:	40020c00 	.word	0x40020c00

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	e7fe      	b.n	8001120 <Error_Handler+0x8>

08001122 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800112c:	f04f 33ff 	mov.w	r3, #4294967295
 8001130:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f831 	bl	80011a0 <MT48LC4M32B2_ClockEnable>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d128      	bne.n	8001196 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8001144:	2001      	movs	r0, #1
 8001146:	f000 f8e1 	bl	800130c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4619      	mov	r1, r3
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f849 	bl	80011e8 <MT48LC4M32B2_Precharge>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d11c      	bne.n	8001196 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	461a      	mov	r2, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f896 	bl	8001298 <MT48LC4M32B2_RefreshMode>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d111      	bne.n	8001196 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 8001172:	6839      	ldr	r1, [r7, #0]
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f85b 	bl	8001230 <MT48LC4M32B2_ModeRegConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10a      	bne.n	8001196 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	4619      	mov	r1, r3
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f8ac 	bl	80012e4 <MT48LC4M32B2_RefreshRate>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MT48LC4M32B2_ClockEnable+0x44>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80011b0:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <MT48LC4M32B2_ClockEnable+0x44>)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MT48LC4M32B2_ClockEnable+0x44>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MT48LC4M32B2_ClockEnable+0x44>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80011c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c6:	4907      	ldr	r1, [pc, #28]	; (80011e4 <MT48LC4M32B2_ClockEnable+0x44>)
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f001 f9bb 	bl	8002544 <HAL_SDRAM_SendCommand>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d002      	beq.n	80011da <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	e000      	b.n	80011dc <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80011da:	2300      	movs	r3, #0
  }
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20008064 	.word	0x20008064

080011e8 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MT48LC4M32B2_Precharge+0x44>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <MT48LC4M32B2_Precharge+0x44>)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MT48LC4M32B2_Precharge+0x44>)
 8001200:	2201      	movs	r2, #1
 8001202:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <MT48LC4M32B2_Precharge+0x44>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800120a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120e:	4907      	ldr	r1, [pc, #28]	; (800122c <MT48LC4M32B2_Precharge+0x44>)
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f001 f997 	bl	8002544 <HAL_SDRAM_SendCommand>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	e000      	b.n	8001224 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001222:	2300      	movs	r3, #0
  }
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20008064 	.word	0x20008064

08001230 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001242:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8001248:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800124e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001254:	4313      	orrs	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800125a:	2204      	movs	r2, #4
 800125c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001264:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001268:	2201      	movs	r2, #1
 800126a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800126c:	4a09      	ldr	r2, [pc, #36]	; (8001294 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001276:	4907      	ldr	r1, [pc, #28]	; (8001294 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f001 f963 	bl	8002544 <HAL_SDRAM_SendCommand>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	e000      	b.n	800128c <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800128a:	2300      	movs	r3, #0
  }
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20008064 	.word	0x20008064

08001298 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 80012a4:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <MT48LC4M32B2_RefreshMode+0x48>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <MT48LC4M32B2_RefreshMode+0x48>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MT48LC4M32B2_RefreshMode+0x48>)
 80012b2:	2208      	movs	r2, #8
 80012b4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <MT48LC4M32B2_RefreshMode+0x48>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80012bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c0:	4907      	ldr	r1, [pc, #28]	; (80012e0 <MT48LC4M32B2_RefreshMode+0x48>)
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f001 f93e 	bl	8002544 <HAL_SDRAM_SendCommand>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	e000      	b.n	80012d6 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80012d4:	2300      	movs	r3, #0
  }
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20008064 	.word	0x20008064

080012e4 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80012ee:	6839      	ldr	r1, [r7, #0]
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f001 f952 	bl	800259a <HAL_SDRAM_ProgramRefreshRate>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d002      	beq.n	8001302 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001300:	e000      	b.n	8001304 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001302:	2300      	movs	r3, #0
  }
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8001314:	f000 f984 	bl	8001620 <HAL_GetTick>
 8001318:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800131a:	bf00      	nop
 800131c:	f000 f980 	bl	8001620 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	d8f7      	bhi.n	800131c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_MspInit+0x44>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_MspInit+0x44>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_MspInit+0x44>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x44>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x44>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x44>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001394:	4b3a      	ldr	r3, [pc, #232]	; (8001480 <HAL_FMC_MspInit+0x100>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d16d      	bne.n	8001478 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800139c:	4b38      	ldr	r3, [pc, #224]	; (8001480 <HAL_FMC_MspInit+0x100>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_FMC_MspInit+0x104>)
 80013a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a6:	4a37      	ldr	r2, [pc, #220]	; (8001484 <HAL_FMC_MspInit+0x104>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6393      	str	r3, [r2, #56]	; 0x38
 80013ae:	4b35      	ldr	r3, [pc, #212]	; (8001484 <HAL_FMC_MspInit+0x104>)
 80013b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80013ba:	f64f 7383 	movw	r3, #65411	; 0xff83
 80013be:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013cc:	230c      	movs	r3, #12
 80013ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	482c      	ldr	r0, [pc, #176]	; (8001488 <HAL_FMC_MspInit+0x108>)
 80013d6:	f000 fa15 	bl	8001804 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80013da:	f248 1333 	movw	r3, #33075	; 0x8133
 80013de:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ec:	230c      	movs	r3, #12
 80013ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4825      	ldr	r0, [pc, #148]	; (800148c <HAL_FMC_MspInit+0x10c>)
 80013f6:	f000 fa05 	bl	8001804 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80013fa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80013fe:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800140c:	230c      	movs	r3, #12
 800140e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	481e      	ldr	r0, [pc, #120]	; (8001490 <HAL_FMC_MspInit+0x110>)
 8001416:	f000 f9f5 	bl	8001804 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800141a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800141e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142c:	230c      	movs	r3, #12
 800142e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4619      	mov	r1, r3
 8001434:	4817      	ldr	r0, [pc, #92]	; (8001494 <HAL_FMC_MspInit+0x114>)
 8001436:	f000 f9e5 	bl	8001804 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800143a:	2328      	movs	r3, #40	; 0x28
 800143c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800144a:	230c      	movs	r3, #12
 800144c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	4811      	ldr	r0, [pc, #68]	; (8001498 <HAL_FMC_MspInit+0x118>)
 8001454:	f000 f9d6 	bl	8001804 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001458:	2308      	movs	r3, #8
 800145a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001468:	230c      	movs	r3, #12
 800146a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <HAL_FMC_MspInit+0x11c>)
 8001472:	f000 f9c7 	bl	8001804 <HAL_GPIO_Init>
 8001476:	e000      	b.n	800147a <HAL_FMC_MspInit+0xfa>
    return;
 8001478:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20008074 	.word	0x20008074
 8001484:	40023800 	.word	0x40023800
 8001488:	40021000 	.word	0x40021000
 800148c:	40021800 	.word	0x40021800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40021400 	.word	0x40021400
 8001498:	40021c00 	.word	0x40021c00
 800149c:	40020800 	.word	0x40020800

080014a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014a8:	f7ff ff6a 	bl	8001380 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <NMI_Handler+0x4>

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 f87a 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001532:	490e      	ldr	r1, [pc, #56]	; (800156c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001548:	4c0b      	ldr	r4, [pc, #44]	; (8001578 <LoopFillZerobss+0x26>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001556:	f7ff ffd7 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f001 f969 	bl	8002830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7ff f83f 	bl	80005e0 <main>
  bx  lr    
 8001562:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001570:	080028dc 	.word	0x080028dc
  ldr r2, =_sbss
 8001574:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001578:	2000807c 	.word	0x2000807c

0800157c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC_IRQHandler>

0800157e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001582:	2003      	movs	r0, #3
 8001584:	f000 f90a 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001588:	2000      	movs	r0, #0
 800158a:	f000 f805 	bl	8001598 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800158e:	f7ff fed3 	bl	8001338 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f917 	bl	80017ea <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f000 f8ed 	bl	80017b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	20008078 	.word	0x20008078

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20008078 	.word	0x20008078

08001638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <__NVIC_SetPriorityGrouping+0x40>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	4313      	orrs	r3, r2
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x40>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00
 800167c:	05fa0000 	.word	0x05fa0000

08001680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__NVIC_GetPriorityGrouping+0x18>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 0307 	and.w	r3, r3, #7
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff47 	bl	8001638 <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff5c 	bl	8001680 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffb0 	bl	8001758 <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e175      	b.n	8001b10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 8164 	bne.w	8001b0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d00b      	beq.n	8001862 <HAL_GPIO_Init+0x5e>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d007      	beq.n	8001862 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001856:	2b11      	cmp	r3, #17
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b12      	cmp	r3, #18
 8001860:	d130      	bne.n	80018c4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001898:	2201      	movs	r2, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	f003 0201 	and.w	r2, r3, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x100>
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b12      	cmp	r3, #18
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80be 	beq.w	8001b0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	4b66      	ldr	r3, [pc, #408]	; (8001b28 <HAL_GPIO_Init+0x324>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a65      	ldr	r2, [pc, #404]	; (8001b28 <HAL_GPIO_Init+0x324>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_GPIO_Init+0x324>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019a6:	4a61      	ldr	r2, [pc, #388]	; (8001b2c <HAL_GPIO_Init+0x328>)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_GPIO_Init+0x32c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d037      	beq.n	8001a42 <HAL_GPIO_Init+0x23e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a57      	ldr	r2, [pc, #348]	; (8001b34 <HAL_GPIO_Init+0x330>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d031      	beq.n	8001a3e <HAL_GPIO_Init+0x23a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a56      	ldr	r2, [pc, #344]	; (8001b38 <HAL_GPIO_Init+0x334>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d02b      	beq.n	8001a3a <HAL_GPIO_Init+0x236>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a55      	ldr	r2, [pc, #340]	; (8001b3c <HAL_GPIO_Init+0x338>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d025      	beq.n	8001a36 <HAL_GPIO_Init+0x232>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a54      	ldr	r2, [pc, #336]	; (8001b40 <HAL_GPIO_Init+0x33c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d01f      	beq.n	8001a32 <HAL_GPIO_Init+0x22e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a53      	ldr	r2, [pc, #332]	; (8001b44 <HAL_GPIO_Init+0x340>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d019      	beq.n	8001a2e <HAL_GPIO_Init+0x22a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_GPIO_Init+0x344>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0x226>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a51      	ldr	r2, [pc, #324]	; (8001b4c <HAL_GPIO_Init+0x348>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00d      	beq.n	8001a26 <HAL_GPIO_Init+0x222>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a50      	ldr	r2, [pc, #320]	; (8001b50 <HAL_GPIO_Init+0x34c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d007      	beq.n	8001a22 <HAL_GPIO_Init+0x21e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d101      	bne.n	8001a1e <HAL_GPIO_Init+0x21a>
 8001a1a:	2309      	movs	r3, #9
 8001a1c:	e012      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a1e:	230a      	movs	r3, #10
 8001a20:	e010      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a22:	2308      	movs	r3, #8
 8001a24:	e00e      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e00c      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	e00a      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a2e:	2305      	movs	r3, #5
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a42:	2300      	movs	r3, #0
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	f002 0203 	and.w	r2, r2, #3
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a54:	4935      	ldr	r1, [pc, #212]	; (8001b2c <HAL_GPIO_Init+0x328>)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a86:	4a34      	ldr	r2, [pc, #208]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ab0:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ada:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	2b0f      	cmp	r3, #15
 8001b14:	f67f ae86 	bls.w	8001824 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40013800 	.word	0x40013800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40021400 	.word	0x40021400
 8001b48:	40021800 	.word	0x40021800
 8001b4c:	40021c00 	.word	0x40021c00
 8001b50:	40022000 	.word	0x40022000
 8001b54:	40022400 	.word	0x40022400
 8001b58:	40013c00 	.word	0x40013c00

08001b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b6c:	787b      	ldrb	r3, [r7, #1]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b78:	e003      	b.n	8001b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	041a      	lsls	r2, r3, #16
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	619a      	str	r2, [r3, #24]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bbe:	f7ff fd2f 	bl	8001620 <HAL_GetTick>
 8001bc2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bc4:	e009      	b.n	8001bda <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bc6:	f7ff fd2b 	bl	8001620 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd4:	d901      	bls.n	8001bda <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e022      	b.n	8001c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be6:	d1ee      	bne.n	8001bc6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf4:	f7ff fd14 	bl	8001620 <HAL_GetTick>
 8001bf8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001bfa:	e009      	b.n	8001c10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bfc:	f7ff fd10 	bl	8001620 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c0a:	d901      	bls.n	8001c10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e007      	b.n	8001c20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c1c:	d1ee      	bne.n	8001bfc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e291      	b.n	800216a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8087 	beq.w	8001d62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c54:	4b96      	ldr	r3, [pc, #600]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d00c      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c60:	4b93      	ldr	r3, [pc, #588]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d112      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62>
 8001c6c:	4b90      	ldr	r3, [pc, #576]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c78:	d10b      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7a:	4b8d      	ldr	r3, [pc, #564]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d06c      	beq.n	8001d60 <HAL_RCC_OscConfig+0x130>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d168      	bne.n	8001d60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e26b      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x7a>
 8001c9c:	4b84      	ldr	r3, [pc, #528]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a83      	ldr	r2, [pc, #524]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	e02e      	b.n	8001d08 <HAL_RCC_OscConfig+0xd8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x9c>
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7e      	ldr	r2, [pc, #504]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b7c      	ldr	r3, [pc, #496]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7b      	ldr	r2, [pc, #492]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e01d      	b.n	8001d08 <HAL_RCC_OscConfig+0xd8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0xc0>
 8001cd6:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a75      	ldr	r2, [pc, #468]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b73      	ldr	r3, [pc, #460]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a72      	ldr	r2, [pc, #456]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_OscConfig+0xd8>
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6e      	ldr	r2, [pc, #440]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b6c      	ldr	r3, [pc, #432]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6b      	ldr	r2, [pc, #428]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff fc86 	bl	8001620 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d18:	f7ff fc82 	bl	8001620 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b64      	cmp	r3, #100	; 0x64
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e21f      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	4b61      	ldr	r3, [pc, #388]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0xe8>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fc72 	bl	8001620 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fc6e 	bl	8001620 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e20b      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x110>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d069      	beq.n	8001e42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d6e:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7a:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d11c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x190>
 8001d86:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d116      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d005      	beq.n	8001daa <HAL_RCC_OscConfig+0x17a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e1df      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	493d      	ldr	r1, [pc, #244]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dbe:	e040      	b.n	8001e42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d023      	beq.n	8001e10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc8:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a38      	ldr	r2, [pc, #224]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fc24 	bl	8001620 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fc20 	bl	8001620 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1bd      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dee:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4929      	ldr	r1, [pc, #164]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
 8001e0e:	e018      	b.n	8001e42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fc00 	bl	8001620 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fbfc 	bl	8001620 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e199      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d038      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d019      	beq.n	8001e8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e62:	f7ff fbdd 	bl	8001620 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fbd9 	bl	8001620 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e176      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x23a>
 8001e88:	e01a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <HAL_RCC_OscConfig+0x280>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7ff fbc3 	bl	8001620 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fbbf 	bl	8001620 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d903      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e15c      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
 8001eb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	4b91      	ldr	r3, [pc, #580]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ee      	bne.n	8001e9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80a4 	beq.w	8002016 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ece:	4b8b      	ldr	r3, [pc, #556]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b88      	ldr	r3, [pc, #544]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	4a87      	ldr	r2, [pc, #540]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee6:	4b85      	ldr	r3, [pc, #532]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef6:	4b82      	ldr	r3, [pc, #520]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f02:	4b7f      	ldr	r3, [pc, #508]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7e      	ldr	r2, [pc, #504]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fb87 	bl	8001620 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7ff fb83 	bl	8001620 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	; 0x64
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e120      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f28:	4b75      	ldr	r3, [pc, #468]	; (8002100 <HAL_RCC_OscConfig+0x4d0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x31a>
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a6e      	ldr	r2, [pc, #440]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
 8001f48:	e02d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x33c>
 8001f52:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a69      	ldr	r2, [pc, #420]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a66      	ldr	r2, [pc, #408]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6a:	e01c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x35e>
 8001f74:	4b61      	ldr	r3, [pc, #388]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	4a60      	ldr	r2, [pc, #384]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f80:	4b5e      	ldr	r3, [pc, #376]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	4a5d      	ldr	r2, [pc, #372]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x376>
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f92:	4a5a      	ldr	r2, [pc, #360]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9a:	4b58      	ldr	r3, [pc, #352]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	4a57      	ldr	r2, [pc, #348]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d015      	beq.n	8001fda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fae:	f7ff fb37 	bl	8001620 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7ff fb33 	bl	8001620 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e0ce      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	4b4b      	ldr	r3, [pc, #300]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ee      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x386>
 8001fd8:	e014      	b.n	8002004 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7ff fb21 	bl	8001620 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff fb1d 	bl	8001620 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e0b8      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	4b40      	ldr	r3, [pc, #256]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ee      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a3b      	ldr	r2, [pc, #236]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80a4 	beq.w	8002168 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002020:	4b36      	ldr	r3, [pc, #216]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d06b      	beq.n	8002104 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d149      	bne.n	80020c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a30      	ldr	r2, [pc, #192]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800203a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800203e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff faee 	bl	8001620 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff faea 	bl	8001620 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e087      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	3b01      	subs	r3, #1
 8002080:	041b      	lsls	r3, r3, #16
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	061b      	lsls	r3, r3, #24
 800208a:	4313      	orrs	r3, r2
 800208c:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800208e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002092:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a18      	ldr	r2, [pc, #96]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 800209a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff fabe 	bl	8001620 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff faba 	bl	8001620 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e057      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x478>
 80020c6:	e04f      	b.n	8002168 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 80020ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff faa4 	bl	8001620 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff faa0 	bl	8001620 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e03d      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ee:	4b03      	ldr	r3, [pc, #12]	; (80020fc <HAL_RCC_OscConfig+0x4cc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x4ac>
 80020fa:	e035      	b.n	8002168 <HAL_RCC_OscConfig+0x538>
 80020fc:	40023800 	.word	0x40023800
 8002100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_RCC_OscConfig+0x544>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d028      	beq.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d121      	bne.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d11a      	bne.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002134:	4013      	ands	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800213a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800213c:	4293      	cmp	r3, r2
 800213e:	d111      	bne.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	3b01      	subs	r3, #1
 800214e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d107      	bne.n	8002164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800

08002178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0d0      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b6a      	ldr	r3, [pc, #424]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d910      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b67      	ldr	r3, [pc, #412]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 020f 	bic.w	r2, r3, #15
 80021a6:	4965      	ldr	r1, [pc, #404]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b63      	ldr	r3, [pc, #396]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0b8      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d020      	beq.n	800220e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d8:	4b59      	ldr	r3, [pc, #356]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a58      	ldr	r2, [pc, #352]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f0:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a52      	ldr	r2, [pc, #328]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fc:	4b50      	ldr	r3, [pc, #320]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	494d      	ldr	r1, [pc, #308]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d040      	beq.n	800229c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b47      	ldr	r3, [pc, #284]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d115      	bne.n	800225a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e07f      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e073      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e06b      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800225a:	4b39      	ldr	r3, [pc, #228]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4936      	ldr	r1, [pc, #216]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226c:	f7ff f9d8 	bl	8001620 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7ff f9d4 	bl	8001620 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e053      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 020c 	and.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1eb      	bne.n	8002274 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800229c:	4b27      	ldr	r3, [pc, #156]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d210      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022aa:	4b24      	ldr	r3, [pc, #144]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 020f 	bic.w	r2, r3, #15
 80022b2:	4922      	ldr	r1, [pc, #136]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d001      	beq.n	80022cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e032      	b.n	8002332 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4916      	ldr	r1, [pc, #88]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022f6:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	490e      	ldr	r1, [pc, #56]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800230a:	f000 f821 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 800230e:	4602      	mov	r2, r0
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	490a      	ldr	r1, [pc, #40]	; (8002344 <HAL_RCC_ClockConfig+0x1cc>)
 800231c:	5ccb      	ldrb	r3, [r1, r3]
 800231e:	fa22 f303 	lsr.w	r3, r2, r3
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <HAL_RCC_ClockConfig+0x1d0>)
 8002324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_ClockConfig+0x1d4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff f934 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023c00 	.word	0x40023c00
 8002340:	40023800 	.word	0x40023800
 8002344:	080028bc 	.word	0x080028bc
 8002348:	20000000 	.word	0x20000000
 800234c:	20000004 	.word	0x20000004

08002350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002354:	b090      	sub	sp, #64	; 0x40
 8002356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002360:	2300      	movs	r3, #0
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002368:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b08      	cmp	r3, #8
 8002372:	d00d      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x40>
 8002374:	2b08      	cmp	r3, #8
 8002376:	f200 80a1 	bhi.w	80024bc <HAL_RCC_GetSysClockFreq+0x16c>
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x34>
 800237e:	2b04      	cmp	r3, #4
 8002380:	d003      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0x3a>
 8002382:	e09b      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002386:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002388:	e09b      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800238a:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800238c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800238e:	e098      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002390:	4b4f      	ldr	r3, [pc, #316]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800239a:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a6:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	099b      	lsrs	r3, r3, #6
 80023ac:	2200      	movs	r2, #0
 80023ae:	623b      	str	r3, [r7, #32]
 80023b0:	627a      	str	r2, [r7, #36]	; 0x24
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023b8:	2100      	movs	r1, #0
 80023ba:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023bc:	fb03 f201 	mul.w	r2, r3, r1
 80023c0:	2300      	movs	r3, #0
 80023c2:	fb00 f303 	mul.w	r3, r0, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	4a43      	ldr	r2, [pc, #268]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ca:	fba0 1202 	umull	r1, r2, r0, r2
 80023ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023d0:	460a      	mov	r2, r1
 80023d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80023d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023d6:	4413      	add	r3, r2
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023dc:	2200      	movs	r2, #0
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	61fa      	str	r2, [r7, #28]
 80023e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023ea:	f7fd ff0d 	bl	8000208 <__aeabi_uldivmod>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4613      	mov	r3, r2
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f6:	e053      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f8:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	099b      	lsrs	r3, r3, #6
 80023fe:	2200      	movs	r2, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	617a      	str	r2, [r7, #20]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800240a:	f04f 0b00 	mov.w	fp, #0
 800240e:	4652      	mov	r2, sl
 8002410:	465b      	mov	r3, fp
 8002412:	f04f 0000 	mov.w	r0, #0
 8002416:	f04f 0100 	mov.w	r1, #0
 800241a:	0159      	lsls	r1, r3, #5
 800241c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002420:	0150      	lsls	r0, r2, #5
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	ebb2 080a 	subs.w	r8, r2, sl
 800242a:	eb63 090b 	sbc.w	r9, r3, fp
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800243a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800243e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002442:	ebb2 0408 	subs.w	r4, r2, r8
 8002446:	eb63 0509 	sbc.w	r5, r3, r9
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	00eb      	lsls	r3, r5, #3
 8002454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002458:	00e2      	lsls	r2, r4, #3
 800245a:	4614      	mov	r4, r2
 800245c:	461d      	mov	r5, r3
 800245e:	eb14 030a 	adds.w	r3, r4, sl
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	eb45 030b 	adc.w	r3, r5, fp
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002476:	4629      	mov	r1, r5
 8002478:	028b      	lsls	r3, r1, #10
 800247a:	4621      	mov	r1, r4
 800247c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002480:	4621      	mov	r1, r4
 8002482:	028a      	lsls	r2, r1, #10
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	2200      	movs	r2, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	60fa      	str	r2, [r7, #12]
 8002490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002494:	f7fd feb8 	bl	8000208 <__aeabi_uldivmod>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4613      	mov	r3, r2
 800249e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	3301      	adds	r3, #1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80024b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024ba:	e002      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3740      	adds	r7, #64	; 0x40
 80024c8:	46bd      	mov	sp, r7
 80024ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	00f42400 	.word	0x00f42400
 80024d8:	017d7840 	.word	0x017d7840

080024dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e025      	b.n	800253c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d106      	bne.n	800250a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7fe ffcb 	bl	80014a0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	4619      	mov	r1, r3
 800251c:	4610      	mov	r0, r2
 800251e:	f000 f85d 	bl	80025dc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	461a      	mov	r2, r3
 800252c:	6839      	ldr	r1, [r7, #0]
 800252e:	f000 f8c7 	bl	80026c0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d101      	bne.n	8002560 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
 800255e:	e018      	b.n	8002592 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f925 	bl	80027c0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d104      	bne.n	8002588 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2205      	movs	r2, #5
 8002582:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002586:	e003      	b.n	8002590 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d101      	bne.n	80025b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
 80025b2:	e00e      	b.n	80025d2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f920 	bl	8002808 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d027      	beq.n	8002646 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <FMC_SDRAM_Init+0xe0>)
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800260c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8002612:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8002618:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800261e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8002624:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800262a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8002630:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8002636:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e032      	b.n	80026ac <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002652:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800265c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8002662:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <FMC_SDRAM_Init+0xe0>)
 8002674:	4013      	ands	r3, r2
 8002676:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002680:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8002686:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800268c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8002692:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8002698:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	4313      	orrs	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	ffff8000 	.word	0xffff8000

080026c0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d02e      	beq.n	8002738 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80026e6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80026f6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8002700:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	3b01      	subs	r3, #1
 8002708:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800270a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	3b01      	subs	r3, #1
 8002712:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8002714:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	3b01      	subs	r3, #1
 800271c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800271e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	3b01      	subs	r3, #1
 8002726:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002728:	4313      	orrs	r3, r2
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	e039      	b.n	80027ac <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <FMC_SDRAM_Timing_Init+0xfc>)
 8002742:	4013      	ands	r3, r2
 8002744:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	3b01      	subs	r3, #1
 800274c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	3b01      	subs	r3, #1
 8002754:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8002756:	4313      	orrs	r3, r2
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800276a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800277a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	3b01      	subs	r3, #1
 8002782:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8002784:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	3b01      	subs	r3, #1
 800278c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800278e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	3b01      	subs	r3, #1
 8002796:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8002798:	4313      	orrs	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	ff0f0fff 	.word	0xff0f0fff

080027c0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <FMC_SDRAM_SendCommand+0x44>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	6811      	ldr	r1, [r2, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	6852      	ldr	r2, [r2, #4]
 80027dc:	4311      	orrs	r1, r2
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	6892      	ldr	r2, [r2, #8]
 80027e2:	3a01      	subs	r2, #1
 80027e4:	0152      	lsls	r2, r2, #5
 80027e6:	4311      	orrs	r1, r2
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	68d2      	ldr	r2, [r2, #12]
 80027ec:	0252      	lsls	r2, r2, #9
 80027ee:	430a      	orrs	r2, r1
 80027f0:	431a      	orrs	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	ffc00000 	.word	0xffc00000

08002808 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <__libc_init_array>:
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	4d0d      	ldr	r5, [pc, #52]	; (8002868 <__libc_init_array+0x38>)
 8002834:	4c0d      	ldr	r4, [pc, #52]	; (800286c <__libc_init_array+0x3c>)
 8002836:	1b64      	subs	r4, r4, r5
 8002838:	10a4      	asrs	r4, r4, #2
 800283a:	2600      	movs	r6, #0
 800283c:	42a6      	cmp	r6, r4
 800283e:	d109      	bne.n	8002854 <__libc_init_array+0x24>
 8002840:	4d0b      	ldr	r5, [pc, #44]	; (8002870 <__libc_init_array+0x40>)
 8002842:	4c0c      	ldr	r4, [pc, #48]	; (8002874 <__libc_init_array+0x44>)
 8002844:	f000 f82e 	bl	80028a4 <_init>
 8002848:	1b64      	subs	r4, r4, r5
 800284a:	10a4      	asrs	r4, r4, #2
 800284c:	2600      	movs	r6, #0
 800284e:	42a6      	cmp	r6, r4
 8002850:	d105      	bne.n	800285e <__libc_init_array+0x2e>
 8002852:	bd70      	pop	{r4, r5, r6, pc}
 8002854:	f855 3b04 	ldr.w	r3, [r5], #4
 8002858:	4798      	blx	r3
 800285a:	3601      	adds	r6, #1
 800285c:	e7ee      	b.n	800283c <__libc_init_array+0xc>
 800285e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002862:	4798      	blx	r3
 8002864:	3601      	adds	r6, #1
 8002866:	e7f2      	b.n	800284e <__libc_init_array+0x1e>
 8002868:	080028d4 	.word	0x080028d4
 800286c:	080028d4 	.word	0x080028d4
 8002870:	080028d4 	.word	0x080028d4
 8002874:	080028d8 	.word	0x080028d8

08002878 <memcpy>:
 8002878:	440a      	add	r2, r1
 800287a:	4291      	cmp	r1, r2
 800287c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002880:	d100      	bne.n	8002884 <memcpy+0xc>
 8002882:	4770      	bx	lr
 8002884:	b510      	push	{r4, lr}
 8002886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800288a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800288e:	4291      	cmp	r1, r2
 8002890:	d1f9      	bne.n	8002886 <memcpy+0xe>
 8002892:	bd10      	pop	{r4, pc}

08002894 <memset>:
 8002894:	4402      	add	r2, r0
 8002896:	4603      	mov	r3, r0
 8002898:	4293      	cmp	r3, r2
 800289a:	d100      	bne.n	800289e <memset+0xa>
 800289c:	4770      	bx	lr
 800289e:	f803 1b01 	strb.w	r1, [r3], #1
 80028a2:	e7f9      	b.n	8002898 <memset+0x4>

080028a4 <_init>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr

080028b0 <_fini>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr
