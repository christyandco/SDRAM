
SDRAM_MEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d24  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f7c  08003f7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f7c  08003f7c  00013f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f84  08003f84  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008108  20000070  08003ffc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008178  08003ffc  00028178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .external_ram 00800000  c0000000  c0000000  00030000  2**2
                  ALLOC
 13 .debug_info   0000a7c2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cae  00000000  00000000  0002a862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  0002c510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000910  00000000  00000000  0002cee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002739d  00000000  00000000  0002d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000abf9  00000000  00000000  00054b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eec3a  00000000  00000000  0005f78e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e3c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002db8  00000000  00000000  0014e418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003ed4 	.word	0x08003ed4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08003ed4 	.word	0x08003ed4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000510:	f3bf 8f4f 	dsb	sy
}
 8000514:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000516:	f3bf 8f6f 	isb	sy
}
 800051a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <SCB_EnableICache+0x48>)
 800051e:	2200      	movs	r2, #0
 8000520:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000524:	f3bf 8f4f 	dsb	sy
}
 8000528:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800052a:	f3bf 8f6f 	isb	sy
}
 800052e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <SCB_EnableICache+0x48>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <SCB_EnableICache+0x48>)
 8000536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800053c:	f3bf 8f4f 	dsb	sy
}
 8000540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000542:	f3bf 8f6f 	isb	sy
}
 8000546:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SCB_EnableDCache+0x84>)
 8000560:	2200      	movs	r2, #0
 8000562:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000566:	f3bf 8f4f 	dsb	sy
}
 800056a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <SCB_EnableDCache+0x84>)
 800056e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000572:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	0b5b      	lsrs	r3, r3, #13
 8000578:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800057c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	08db      	lsrs	r3, r3, #3
 8000582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000586:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	015a      	lsls	r2, r3, #5
 800058c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000590:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000596:	4911      	ldr	r1, [pc, #68]	; (80005dc <SCB_EnableDCache+0x84>)
 8000598:	4313      	orrs	r3, r2
 800059a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	1e5a      	subs	r2, r3, #1
 80005a2:	60ba      	str	r2, [r7, #8]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1ef      	bne.n	8000588 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	1e5a      	subs	r2, r3, #1
 80005ac:	60fa      	str	r2, [r7, #12]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1e5      	bne.n	800057e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005b2:	f3bf 8f4f 	dsb	sy
}
 80005b6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <SCB_EnableDCache+0x84>)
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <SCB_EnableDCache+0x84>)
 80005be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005c4:	f3bf 8f4f 	dsb	sy
}
 80005c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ca:	f3bf 8f6f 	isb	sy
}
 80005ce:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, ptr, len * sizeof(char), HAL_MAX_DELAY);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295
 80005f4:	68b9      	ldr	r1, [r7, #8]
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <_write+0x28>)
 80005f8:	f002 f9c9 	bl	800298e <HAL_UART_Transmit>
	return len;
 80005fc:	687b      	ldr	r3, [r7, #4]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000c0 	.word	0x200000c0

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000612:	f7ff ff7b 	bl	800050c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000616:	f7ff ff9f 	bl	8000558 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f001 f8ff 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f8a1 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f9ab 	bl	800097c <MX_GPIO_Init>
  MX_FMC_Init();
 8000626:	f000 f93b 	bl	80008a0 <MX_FMC_Init>
  MX_USART1_UART_Init();
 800062a:	f000 f909 	bl	8000840 <MX_USART1_UART_Init>
  printf("SDRAM TEST Demo...\r\n");
 800062e:	4836      	ldr	r0, [pc, #216]	; (8000708 <main+0xfc>)
 8000630:	f002 ffc0 	bl	80035b4 <puts>
  /* USER CODE BEGIN 2 */
  Fill_Buffer(wdata,BUFFER_SIZE,0);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063a:	4834      	ldr	r0, [pc, #208]	; (800070c <main+0x100>)
 800063c:	f000 f870 	bl	8000720 <Fill_Buffer>

  for(int i=0;i <NUM_BUFFER;i++)
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	e05b      	b.n	80006fe <main+0xf2>
     {

	  for(uwIndex=0;uwIndex < BUFFER_SIZE;uwIndex++)
 8000646:	4b32      	ldr	r3, [pc, #200]	; (8000710 <main+0x104>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	e011      	b.n	8000672 <main+0x66>

	  	  {
		  extRamBuffer[i*BUFFER_SIZE+uwIndex]=wdata[uwIndex];
 800064e:	4b30      	ldr	r3, [pc, #192]	; (8000710 <main+0x104>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	0319      	lsls	r1, r3, #12
 8000656:	4b2e      	ldr	r3, [pc, #184]	; (8000710 <main+0x104>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	440b      	add	r3, r1
 800065c:	492b      	ldr	r1, [pc, #172]	; (800070c <main+0x100>)
 800065e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000662:	492c      	ldr	r1, [pc, #176]	; (8000714 <main+0x108>)
 8000664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(uwIndex=0;uwIndex < BUFFER_SIZE;uwIndex++)
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <main+0x104>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a28      	ldr	r2, [pc, #160]	; (8000710 <main+0x104>)
 8000670:	6013      	str	r3, [r2, #0]
 8000672:	4b27      	ldr	r3, [pc, #156]	; (8000710 <main+0x104>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800067a:	d3e8      	bcc.n	800064e <main+0x42>
	 	 // memcpy((uint32_t *) SDRAM_ADD, wdata, BUFFER_SIZE+uwIndex);
	      }

	   	   	      //READ DATA FROM SDARM MEMORY
	   for(uwIndex=0;uwIndex < BUFFER_SIZE;uwIndex++)
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <main+0x104>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	e011      	b.n	80006a8 <main+0x9c>
	   	  {
	   	  // memcpy(rdata, (uint32_t *) SDRAM_ADD, BUFFER_SIZE+uwIndex);
		   rdata[uwIndex]= extRamBuffer[i*BUFFER_SIZE+uwIndex];
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	031a      	lsls	r2, r3, #12
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <main+0x104>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	441a      	add	r2, r3
 800068e:	4b20      	ldr	r3, [pc, #128]	; (8000710 <main+0x104>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4920      	ldr	r1, [pc, #128]	; (8000714 <main+0x108>)
 8000694:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000698:	491f      	ldr	r1, [pc, #124]	; (8000718 <main+0x10c>)
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	   for(uwIndex=0;uwIndex < BUFFER_SIZE;uwIndex++)
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <main+0x104>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3301      	adds	r3, #1
 80006a4:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <main+0x104>)
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b19      	ldr	r3, [pc, #100]	; (8000710 <main+0x104>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006b0:	d3e8      	bcc.n	8000684 <main+0x78>
	   	  }
	   	   	      		//checking data integrity
	   for(uwIndex=0;(uwIndex < BUFFER_SIZE) && uwWriteReadStatus==0;uwIndex++)
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <main+0x104>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	e015      	b.n	80006e6 <main+0xda>
	   	  {
	   	   if(rdata[uwIndex]!=wdata[uwIndex])
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <main+0x104>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a16      	ldr	r2, [pc, #88]	; (8000718 <main+0x10c>)
 80006c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <main+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4910      	ldr	r1, [pc, #64]	; (800070c <main+0x100>)
 80006ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d004      	beq.n	80006dc <main+0xd0>
	   	   	 {
	   	   	  uwWriteReadStatus++;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <main+0x110>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	4a10      	ldr	r2, [pc, #64]	; (800071c <main+0x110>)
 80006da:	6013      	str	r3, [r2, #0]
	   for(uwIndex=0;(uwIndex < BUFFER_SIZE) && uwWriteReadStatus==0;uwIndex++)
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <main+0x104>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <main+0x104>)
 80006e4:	6013      	str	r3, [r2, #0]
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <main+0x104>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006ee:	d203      	bcs.n	80006f8 <main+0xec>
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <main+0x110>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d0e0      	beq.n	80006ba <main+0xae>
  for(int i=0;i <NUM_BUFFER;i++)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3301      	adds	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000704:	d39f      	bcc.n	8000646 <main+0x3a>





  while (1)
 8000706:	e7fe      	b.n	8000706 <main+0xfa>
 8000708:	08003eec 	.word	0x08003eec
 800070c:	20000144 	.word	0x20000144
 8000710:	20008148 	.word	0x20008148
 8000714:	c0000000 	.word	0xc0000000
 8000718:	20004144 	.word	0x20004144
 800071c:	20008144 	.word	0x20008144

08000720 <Fill_Buffer>:

  }

}

static void Fill_Buffer(uint32_t *pBuffer,uint32_t uwBufferLength,uint32_t uwOffset){
 8000720:	b480      	push	{r7}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
	uint32_t tmpIndex=0;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
	for(tmpIndex=0;tmpIndex < uwBufferLength;tmpIndex++){
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	e00a      	b.n	800074c <Fill_Buffer+0x2c>
		pBuffer[tmpIndex]=tmpIndex+uwOffset;
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	4413      	add	r3, r2
 800073e:	6979      	ldr	r1, [r7, #20]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	440a      	add	r2, r1
 8000744:	601a      	str	r2, [r3, #0]
	for(tmpIndex=0;tmpIndex < uwBufferLength;tmpIndex++){
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3301      	adds	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	429a      	cmp	r2, r3
 8000752:	d3f0      	bcc.n	8000736 <Fill_Buffer+0x16>
	}

}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	371c      	adds	r7, #28
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fea8 	bl	80034c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <SystemClock_Config+0xd4>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a2a      	ldr	r2, [pc, #168]	; (8000838 <SystemClock_Config+0xd4>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <SystemClock_Config+0xd4>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	4b26      	ldr	r3, [pc, #152]	; (800083c <SystemClock_Config+0xd8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a25      	ldr	r2, [pc, #148]	; (800083c <SystemClock_Config+0xd8>)
 80007a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <SystemClock_Config+0xd8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007cc:	2319      	movs	r3, #25
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80007d0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fb7c 	bl	8001ee0 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007ee:	f000 fcf7 	bl	80011e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007f2:	f001 fb25 	bl	8001e40 <HAL_PWREx_EnableOverDrive>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007fc:	f000 fcf0 	bl	80011e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	2302      	movs	r3, #2
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800080c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2107      	movs	r1, #7
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fe02 	bl	8002428 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800082a:	f000 fcd9 	bl	80011e0 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	; 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <MX_USART1_UART_Init+0x5c>)
 8000848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_USART1_UART_Init+0x58>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_USART1_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_USART1_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <MX_USART1_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_USART1_UART_Init+0x58>)
 8000884:	f002 f835 	bl	80028f2 <HAL_UART_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800088e:	f000 fca7 	bl	80011e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000c0 	.word	0x200000c0
 800089c:	40011000 	.word	0x40011000

080008a0 <MX_FMC_Init>:
/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	; 0x40
 80008a4:	af00      	add	r7, sp, #0


  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80008a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80008ba:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <MX_FMC_Init+0xd4>)
 80008bc:	4a2e      	ldr	r2, [pc, #184]	; (8000978 <MX_FMC_Init+0xd8>)
 80008be:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <MX_FMC_Init+0xd4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80008c6:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_FMC_Init+0xd4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_FMC_Init+0xd4>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_FMC_Init+0xd4>)
 80008d4:	2210      	movs	r2, #16
 80008d6:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_FMC_Init+0xd4>)
 80008da:	2240      	movs	r2, #64	; 0x40
 80008dc:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_FMC_Init+0xd4>)
 80008e0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80008e4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80008e6:	4b23      	ldr	r3, [pc, #140]	; (8000974 <MX_FMC_Init+0xd4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_FMC_Init+0xd4>)
 80008ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f2:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_FMC_Init+0xd4>)
 80008f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_FMC_Init+0xd4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000906:	2307      	movs	r3, #7
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 4;
 800090a:	2304      	movs	r3, #4
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 7;
 800090e:	2307      	movs	r3, #7
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 3;
 8000912:	2303      	movs	r3, #3
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4619      	mov	r1, r3
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <MX_FMC_Init+0xd4>)
 8000926:	f001 ff65 	bl	80027f4 <HAL_SDRAM_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000930:	f000 fc56 	bl	80011e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  SDRAM_Context_t SDRAM_FMC;
  SDRAM_FMC.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK1;  // changeable
 8000934:	2310      	movs	r3, #16
 8000936:	607b      	str	r3, [r7, #4]
  SDRAM_FMC.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8000938:	2303      	movs	r3, #3
 800093a:	60bb      	str	r3, [r7, #8]
  SDRAM_FMC.RefreshRate     = REFRESH_COUNT;
 800093c:	f240 6303 	movw	r3, #1539	; 0x603
 8000940:	60fb      	str	r3, [r7, #12]
  SDRAM_FMC.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  SDRAM_FMC.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  SDRAM_FMC.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;   // changeable
 800094a:	2330      	movs	r3, #48	; 0x30
 800094c:	61bb      	str	r3, [r7, #24]
  SDRAM_FMC.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  SDRAM_FMC.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8000952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000956:	623b      	str	r3, [r7, #32]

  if (MT48LC4M32B2_Init(&hsdram1, &SDRAM_FMC)!=MT48LC4M32B2_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_FMC_Init+0xd4>)
 800095e:	f000 fc44 	bl	80011ea <MT48LC4M32B2_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_FMC_Init+0xcc>
  {
	  Error_Handler();
 8000968:	f000 fc3a 	bl	80011e0 <Error_Handler>
  }

  /* USER CODE END FMC_Init 2 */
}
 800096c:	bf00      	nop
 800096e:	3740      	adds	r7, #64	; 0x40
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000008c 	.word	0x2000008c
 8000978:	a0000140 	.word	0xa0000140

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b090      	sub	sp, #64	; 0x40
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000992:	4bad      	ldr	r3, [pc, #692]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4aac      	ldr	r2, [pc, #688]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4baa      	ldr	r3, [pc, #680]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0310 	and.w	r3, r3, #16
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80009a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009aa:	4ba7      	ldr	r3, [pc, #668]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4aa6      	ldr	r2, [pc, #664]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 80009b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4ba4      	ldr	r3, [pc, #656]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4ba1      	ldr	r3, [pc, #644]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4aa0      	ldr	r2, [pc, #640]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b9e      	ldr	r3, [pc, #632]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	623b      	str	r3, [r7, #32]
 80009d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	4b9b      	ldr	r3, [pc, #620]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a9a      	ldr	r2, [pc, #616]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b98      	ldr	r3, [pc, #608]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	61fb      	str	r3, [r7, #28]
 80009f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b95      	ldr	r3, [pc, #596]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a94      	ldr	r2, [pc, #592]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b92      	ldr	r3, [pc, #584]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	61bb      	str	r3, [r7, #24]
 8000a08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b8f      	ldr	r3, [pc, #572]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a8e      	ldr	r2, [pc, #568]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b8c      	ldr	r3, [pc, #560]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a22:	4b89      	ldr	r3, [pc, #548]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a88      	ldr	r2, [pc, #544]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b86      	ldr	r3, [pc, #536]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a3a:	4b83      	ldr	r3, [pc, #524]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a82      	ldr	r2, [pc, #520]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b80      	ldr	r3, [pc, #512]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a52:	4b7d      	ldr	r3, [pc, #500]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a7c      	ldr	r2, [pc, #496]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b7a      	ldr	r3, [pc, #488]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a6a:	4b77      	ldr	r3, [pc, #476]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a76      	ldr	r2, [pc, #472]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a70:	f043 0320 	orr.w	r3, r3, #32
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b74      	ldr	r3, [pc, #464]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0320 	and.w	r3, r3, #32
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a82:	4b71      	ldr	r3, [pc, #452]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a70      	ldr	r2, [pc, #448]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b6e      	ldr	r3, [pc, #440]	; (8000c48 <MX_GPIO_Init+0x2cc>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	486b      	ldr	r0, [pc, #428]	; (8000c4c <MX_GPIO_Init+0x2d0>)
 8000aa0:	f001 f9b4 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f241 010c 	movw	r1, #4108	; 0x100c
 8000aaa:	4869      	ldr	r0, [pc, #420]	; (8000c50 <MX_GPIO_Init+0x2d4>)
 8000aac:	f001 f9ae 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2108      	movs	r1, #8
 8000ab4:	4867      	ldr	r0, [pc, #412]	; (8000c54 <MX_GPIO_Init+0x2d8>)
 8000ab6:	f001 f9a9 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac0:	4865      	ldr	r0, [pc, #404]	; (8000c58 <MX_GPIO_Init+0x2dc>)
 8000ac2:	f001 f9a3 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	21c8      	movs	r1, #200	; 0xc8
 8000aca:	4864      	ldr	r0, [pc, #400]	; (8000c5c <MX_GPIO_Init+0x2e0>)
 8000acc:	f001 f99e 	bl	8001e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_B0_Pin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000ad0:	2310      	movs	r3, #16
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ae0:	230e      	movs	r3, #14
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae8:	4619      	mov	r1, r3
 8000aea:	485d      	ldr	r0, [pc, #372]	; (8000c60 <MX_GPIO_Init+0x2e4>)
 8000aec:	f000 ffe2 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000af0:	2308      	movs	r3, #8
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b00:	4619      	mov	r1, r3
 8000b02:	4857      	ldr	r0, [pc, #348]	; (8000c60 <MX_GPIO_Init+0x2e4>)
 8000b04:	f000 ffd6 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b18:	2309      	movs	r3, #9
 8000b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b20:	4619      	mov	r1, r3
 8000b22:	484f      	ldr	r0, [pc, #316]	; (8000c60 <MX_GPIO_Init+0x2e4>)
 8000b24:	f000 ffc6 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000b28:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3a:	230b      	movs	r3, #11
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b42:	4619      	mov	r1, r3
 8000b44:	4845      	ldr	r0, [pc, #276]	; (8000c5c <MX_GPIO_Init+0x2e0>)
 8000b46:	f000 ffb5 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000b4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b50:	2312      	movs	r3, #18
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b64:	4619      	mov	r1, r3
 8000b66:	483f      	ldr	r0, [pc, #252]	; (8000c64 <MX_GPIO_Init+0x2e8>)
 8000b68:	f000 ffa4 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000b6c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b7e:	230a      	movs	r3, #10
 8000b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b86:	4619      	mov	r1, r3
 8000b88:	4836      	ldr	r0, [pc, #216]	; (8000c64 <MX_GPIO_Init+0x2e8>)
 8000b8a:	f000 ff93 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000b8e:	2310      	movs	r3, #16
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	482e      	ldr	r0, [pc, #184]	; (8000c64 <MX_GPIO_Init+0x2e8>)
 8000baa:	f000 ff83 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4820      	ldr	r0, [pc, #128]	; (8000c4c <MX_GPIO_Init+0x2d0>)
 8000bca:	f000 ff73 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000bce:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000be0:	230c      	movs	r3, #12
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be8:	4619      	mov	r1, r3
 8000bea:	481f      	ldr	r0, [pc, #124]	; (8000c68 <MX_GPIO_Init+0x2ec>)
 8000bec:	f000 ff62 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c02:	2301      	movs	r3, #1
 8000c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4817      	ldr	r0, [pc, #92]	; (8000c6c <MX_GPIO_Init+0x2f0>)
 8000c0e:	f000 ff51 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000c12:	2360      	movs	r3, #96	; 0x60
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c22:	230d      	movs	r3, #13
 8000c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <MX_GPIO_Init+0x2e4>)
 8000c2e:	f000 ff41 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c42:	2307      	movs	r3, #7
 8000c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c46:	e013      	b.n	8000c70 <MX_GPIO_Init+0x2f4>
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	40022000 	.word	0x40022000
 8000c54:	40022800 	.word	0x40022800
 8000c58:	40021c00 	.word	0x40021c00
 8000c5c:	40021800 	.word	0x40021800
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40020400 	.word	0x40020400
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40020000 	.word	0x40020000
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c74:	4619      	mov	r1, r3
 8000c76:	48bc      	ldr	r0, [pc, #752]	; (8000f68 <MX_GPIO_Init+0x5ec>)
 8000c78:	f000 ff1c 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c94:	4619      	mov	r1, r3
 8000c96:	48b4      	ldr	r0, [pc, #720]	; (8000f68 <MX_GPIO_Init+0x5ec>)
 8000c98:	f000 ff0c 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B1_Pin LCD_B2_Pin LCD_B3_Pin LCD_G4_Pin
                           LCD_G1_Pin LCD_G3_Pin LCD_G0_Pin LCD_G2_Pin
                           LCD_R7_Pin LCD_R5_Pin LCD_R6_Pin LCD_R4_Pin
                           LCD_R3_Pin LCD_R1_Pin LCD_R2_Pin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000c9c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cae:	230e      	movs	r3, #14
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	48ac      	ldr	r0, [pc, #688]	; (8000f6c <MX_GPIO_Init+0x5f0>)
 8000cba:	f000 fefb 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	48a6      	ldr	r0, [pc, #664]	; (8000f6c <MX_GPIO_Init+0x5f0>)
 8000cd4:	f000 feee 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000cd8:	2340      	movs	r3, #64	; 0x40
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cdc:	4ba4      	ldr	r3, [pc, #656]	; (8000f70 <MX_GPIO_Init+0x5f4>)
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce8:	4619      	mov	r1, r3
 8000cea:	48a2      	ldr	r0, [pc, #648]	; (8000f74 <MX_GPIO_Init+0x5f8>)
 8000cec:	f000 fee2 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000cf0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d02:	230a      	movs	r3, #10
 8000d04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	489a      	ldr	r0, [pc, #616]	; (8000f78 <MX_GPIO_Init+0x5fc>)
 8000d0e:	f000 fed1 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8000d12:	23f0      	movs	r3, #240	; 0xf0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000d22:	230a      	movs	r3, #10
 8000d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4893      	ldr	r0, [pc, #588]	; (8000f7c <MX_GPIO_Init+0x600>)
 8000d2e:	f000 fec1 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_G6_Pin LCD_G7_Pin LCD_G5_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000d32:	23f7      	movs	r3, #247	; 0xf7
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d42:	230e      	movs	r3, #14
 8000d44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	488c      	ldr	r0, [pc, #560]	; (8000f80 <MX_GPIO_Init+0x604>)
 8000d4e:	f000 feb1 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d64:	2309      	movs	r3, #9
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4885      	ldr	r0, [pc, #532]	; (8000f84 <MX_GPIO_Init+0x608>)
 8000d70:	f000 fea0 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000d86:	230a      	movs	r3, #10
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	487c      	ldr	r0, [pc, #496]	; (8000f84 <MX_GPIO_Init+0x608>)
 8000d92:	f000 fe8f 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d96:	2320      	movs	r3, #32
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000daa:	4619      	mov	r1, r3
 8000dac:	4871      	ldr	r0, [pc, #452]	; (8000f74 <MX_GPIO_Init+0x5f8>)
 8000dae:	f000 fe81 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000db2:	2308      	movs	r3, #8
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000dc2:	230d      	movs	r3, #13
 8000dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4869      	ldr	r0, [pc, #420]	; (8000f74 <MX_GPIO_Init+0x5f8>)
 8000dce:	f000 fe71 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000dd2:	f241 030c 	movw	r3, #4108	; 0x100c
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de8:	4619      	mov	r1, r3
 8000dea:	4864      	ldr	r0, [pc, #400]	; (8000f7c <MX_GPIO_Init+0x600>)
 8000dec:	f000 fe62 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e02:	4619      	mov	r1, r3
 8000e04:	4860      	ldr	r0, [pc, #384]	; (8000f88 <MX_GPIO_Init+0x60c>)
 8000e06:	f000 fe55 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_R0_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000e0a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e1c:	230e      	movs	r3, #14
 8000e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e24:	4619      	mov	r1, r3
 8000e26:	4855      	ldr	r0, [pc, #340]	; (8000f7c <MX_GPIO_Init+0x600>)
 8000e28:	f000 fe44 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e40:	4619      	mov	r1, r3
 8000e42:	484f      	ldr	r0, [pc, #316]	; (8000f80 <MX_GPIO_Init+0x604>)
 8000e44:	f000 fe36 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e5a:	230d      	movs	r3, #13
 8000e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e62:	4619      	mov	r1, r3
 8000e64:	4847      	ldr	r0, [pc, #284]	; (8000f84 <MX_GPIO_Init+0x608>)
 8000e66:	f000 fe25 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	483d      	ldr	r0, [pc, #244]	; (8000f74 <MX_GPIO_Init+0x5f8>)
 8000e7e:	f000 fe19 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000e82:	2304      	movs	r3, #4
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e92:	230c      	movs	r3, #12
 8000e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4835      	ldr	r0, [pc, #212]	; (8000f74 <MX_GPIO_Init+0x5f8>)
 8000e9e:	f000 fe09 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000ea2:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4835      	ldr	r0, [pc, #212]	; (8000f8c <MX_GPIO_Init+0x610>)
 8000eb8:	f000 fdfc 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ecc:	2305      	movs	r3, #5
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4829      	ldr	r0, [pc, #164]	; (8000f7c <MX_GPIO_Init+0x600>)
 8000ed8:	f000 fdec 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4825      	ldr	r0, [pc, #148]	; (8000f8c <MX_GPIO_Init+0x610>)
 8000ef6:	f000 fddd 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000efa:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000f0c:	230d      	movs	r3, #13
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f14:	4619      	mov	r1, r3
 8000f16:	481d      	ldr	r0, [pc, #116]	; (8000f8c <MX_GPIO_Init+0x610>)
 8000f18:	f000 fdcc 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f34:	4619      	mov	r1, r3
 8000f36:	4811      	ldr	r0, [pc, #68]	; (8000f7c <MX_GPIO_Init+0x600>)
 8000f38:	f000 fdbc 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f56:	4619      	mov	r1, r3
 8000f58:	4807      	ldr	r0, [pc, #28]	; (8000f78 <MX_GPIO_Init+0x5fc>)
 8000f5a:	f000 fdab 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f64:	e014      	b.n	8000f90 <MX_GPIO_Init+0x614>
 8000f66:	bf00      	nop
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40022400 	.word	0x40022400
 8000f70:	10120000 	.word	0x10120000
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40022000 	.word	0x40022000
 8000f80:	40022800 	.word	0x40022800
 8000f84:	40021800 	.word	0x40021800
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40021c00 	.word	0x40021c00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4885      	ldr	r0, [pc, #532]	; (80011bc <MX_GPIO_Init+0x840>)
 8000fa8:	f000 fd84 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fb2:	4b83      	ldr	r3, [pc, #524]	; (80011c0 <MX_GPIO_Init+0x844>)
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4880      	ldr	r0, [pc, #512]	; (80011c4 <MX_GPIO_Init+0x848>)
 8000fc2:	f000 fd77 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000fc6:	23c0      	movs	r3, #192	; 0xc0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4879      	ldr	r0, [pc, #484]	; (80011c8 <MX_GPIO_Init+0x84c>)
 8000fe2:	f000 fd67 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000fe6:	2310      	movs	r3, #16
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ffe:	4619      	mov	r1, r3
 8001000:	4872      	ldr	r0, [pc, #456]	; (80011cc <MX_GPIO_Init+0x850>)
 8001002:	f000 fd57 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001006:	23c8      	movs	r3, #200	; 0xc8
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800101a:	4619      	mov	r1, r3
 800101c:	486c      	ldr	r0, [pc, #432]	; (80011d0 <MX_GPIO_Init+0x854>)
 800101e:	f000 fd49 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001022:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001028:	2303      	movs	r3, #3
 800102a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001034:	4619      	mov	r1, r3
 8001036:	4867      	ldr	r0, [pc, #412]	; (80011d4 <MX_GPIO_Init+0x858>)
 8001038:	f000 fd3c 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800103c:	2305      	movs	r3, #5
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800104c:	230a      	movs	r3, #10
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001054:	4619      	mov	r1, r3
 8001056:	485c      	ldr	r0, [pc, #368]	; (80011c8 <MX_GPIO_Init+0x84c>)
 8001058:	f000 fd2c 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800105c:	2332      	movs	r3, #50	; 0x32
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106c:	230b      	movs	r3, #11
 800106e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001074:	4619      	mov	r1, r3
 8001076:	4854      	ldr	r0, [pc, #336]	; (80011c8 <MX_GPIO_Init+0x84c>)
 8001078:	f000 fd1c 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800107c:	2304      	movs	r3, #4
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800108c:	2309      	movs	r3, #9
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001094:	4619      	mov	r1, r3
 8001096:	4850      	ldr	r0, [pc, #320]	; (80011d8 <MX_GPIO_Init+0x85c>)
 8001098:	f000 fd0c 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800109c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010ae:	2309      	movs	r3, #9
 80010b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b6:	4619      	mov	r1, r3
 80010b8:	4848      	ldr	r0, [pc, #288]	; (80011dc <MX_GPIO_Init+0x860>)
 80010ba:	f000 fcfb 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80010be:	2304      	movs	r3, #4
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ce:	4619      	mov	r1, r3
 80010d0:	483f      	ldr	r0, [pc, #252]	; (80011d0 <MX_GPIO_Init+0x854>)
 80010d2:	f000 fcef 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010d6:	2386      	movs	r3, #134	; 0x86
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e6:	230b      	movs	r3, #11
 80010e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ee:	4619      	mov	r1, r3
 80010f0:	4832      	ldr	r0, [pc, #200]	; (80011bc <MX_GPIO_Init+0x840>)
 80010f2:	f000 fcdf 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80010f6:	2301      	movs	r3, #1
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001106:	4619      	mov	r1, r3
 8001108:	482c      	ldr	r0, [pc, #176]	; (80011bc <MX_GPIO_Init+0x840>)
 800110a:	f000 fcd3 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800110e:	2350      	movs	r3, #80	; 0x50
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800111e:	230d      	movs	r3, #13
 8001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4824      	ldr	r0, [pc, #144]	; (80011bc <MX_GPIO_Init+0x840>)
 800112a:	f000 fcc3 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800112e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001134:	2312      	movs	r3, #18
 8001136:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001140:	2304      	movs	r3, #4
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001148:	4619      	mov	r1, r3
 800114a:	4820      	ldr	r0, [pc, #128]	; (80011cc <MX_GPIO_Init+0x850>)
 800114c:	f000 fcb2 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001150:	2328      	movs	r3, #40	; 0x28
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001160:	230a      	movs	r3, #10
 8001162:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001168:	4619      	mov	r1, r3
 800116a:	4814      	ldr	r0, [pc, #80]	; (80011bc <MX_GPIO_Init+0x840>)
 800116c:	f000 fca2 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001170:	2340      	movs	r3, #64	; 0x40
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001180:	2309      	movs	r3, #9
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001188:	4619      	mov	r1, r3
 800118a:	4810      	ldr	r0, [pc, #64]	; (80011cc <MX_GPIO_Init+0x850>)
 800118c:	f000 fc92 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001190:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011a2:	2305      	movs	r3, #5
 80011a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011aa:	4619      	mov	r1, r3
 80011ac:	480a      	ldr	r0, [pc, #40]	; (80011d8 <MX_GPIO_Init+0x85c>)
 80011ae:	f000 fc81 	bl	8001ab4 <HAL_GPIO_Init>

}
 80011b2:	bf00      	nop
 80011b4:	3740      	adds	r7, #64	; 0x40
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020000 	.word	0x40020000
 80011c0:	10120000 	.word	0x10120000
 80011c4:	40022000 	.word	0x40022000
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40021c00 	.word	0x40021c00
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40021400 	.word	0x40021400
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020c00 	.word	0x40020c00

080011e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <Error_Handler+0x8>

080011ea <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, SDRAM_Context_t *pRegMode)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f831 	bl	8001268 <MT48LC4M32B2_ClockEnable>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d128      	bne.n	800125e <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f000 f8e1 	bl	80013d4 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f849 	bl	80012b0 <MT48LC4M32B2_Precharge>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d11c      	bne.n	800125e <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	6819      	ldr	r1, [r3, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	461a      	mov	r2, r3
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f896 	bl	8001360 <MT48LC4M32B2_RefreshMode>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d111      	bne.n	800125e <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800123a:	6839      	ldr	r1, [r7, #0]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f85b 	bl	80012f8 <MT48LC4M32B2_ModeRegConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10a      	bne.n	800125e <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f8ac 	bl	80013ac <MT48LC4M32B2_RefreshRate>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800125e:	68fb      	ldr	r3, [r7, #12]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MT48LC4M32B2_ClockEnable+0x44>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8001278:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <MT48LC4M32B2_ClockEnable+0x44>)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MT48LC4M32B2_ClockEnable+0x44>)
 8001280:	2201      	movs	r2, #1
 8001282:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MT48LC4M32B2_ClockEnable+0x44>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800128a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128e:	4907      	ldr	r1, [pc, #28]	; (80012ac <MT48LC4M32B2_ClockEnable+0x44>)
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f001 fae3 	bl	800285c <HAL_SDRAM_SendCommand>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	e000      	b.n	80012a4 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80012a2:	2300      	movs	r3, #0
  }
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000814c 	.word	0x2000814c

080012b0 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MT48LC4M32B2_Precharge+0x44>)
 80012bc:	2202      	movs	r2, #2
 80012be:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80012c0:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <MT48LC4M32B2_Precharge+0x44>)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MT48LC4M32B2_Precharge+0x44>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MT48LC4M32B2_Precharge+0x44>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80012d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d6:	4907      	ldr	r1, [pc, #28]	; (80012f4 <MT48LC4M32B2_Precharge+0x44>)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f001 fabf 	bl	800285c <HAL_SDRAM_SendCommand>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
 80012e8:	e000      	b.n	80012ec <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80012ea:	2300      	movs	r3, #0
  }
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000814c 	.word	0x2000814c

080012f8 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, SDRAM_Context_t *pRegMode)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800130a:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8001310:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8001316:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800131c:	4313      	orrs	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001322:	2204      	movs	r2, #4
 8001324:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a0c      	ldr	r2, [pc, #48]	; (800135c <MT48LC4M32B2_ModeRegConfig+0x64>)
 800132c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001330:	2201      	movs	r2, #1
 8001332:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001334:	4a09      	ldr	r2, [pc, #36]	; (800135c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800133a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133e:	4907      	ldr	r1, [pc, #28]	; (800135c <MT48LC4M32B2_ModeRegConfig+0x64>)
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f001 fa8b 	bl	800285c <HAL_SDRAM_SendCommand>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	e000      	b.n	8001354 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8001352:	2300      	movs	r3, #0
  }
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000814c 	.word	0x2000814c

08001360 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <MT48LC4M32B2_RefreshMode+0x48>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8001372:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <MT48LC4M32B2_RefreshMode+0x48>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <MT48LC4M32B2_RefreshMode+0x48>)
 800137a:	2208      	movs	r2, #8
 800137c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <MT48LC4M32B2_RefreshMode+0x48>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8001384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <MT48LC4M32B2_RefreshMode+0x48>)
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f001 fa66 	bl	800285c <HAL_SDRAM_SendCommand>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e000      	b.n	800139e <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800139c:	2300      	movs	r3, #0
  }
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000814c 	.word	0x2000814c

080013ac <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f001 fa7a 	bl	80028b2 <HAL_SDRAM_ProgramRefreshRate>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	e000      	b.n	80013cc <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80013ca:	2300      	movs	r3, #0
  }
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80013dc:	f000 fa78 	bl	80018d0 <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80013e2:	bf00      	nop
 80013e4:	f000 fa74 	bl	80018d0 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_MspInit+0x44>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_MspInit+0x44>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_MspInit+0x44>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_MspInit+0x44>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <HAL_MspInit+0x44>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_MspInit+0x44>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800

08001448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a25      	ldr	r2, [pc, #148]	; (80014fc <HAL_UART_MspInit+0xb4>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d144      	bne.n	80014f4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <HAL_UART_MspInit+0xb8>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a24      	ldr	r2, [pc, #144]	; (8001500 <HAL_UART_MspInit+0xb8>)
 8001470:	f043 0310 	orr.w	r3, r3, #16
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <HAL_UART_MspInit+0xb8>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <HAL_UART_MspInit+0xb8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <HAL_UART_MspInit+0xb8>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_UART_MspInit+0xb8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_UART_MspInit+0xb8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a18      	ldr	r2, [pc, #96]	; (8001500 <HAL_UART_MspInit+0xb8>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <HAL_UART_MspInit+0xb8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c2:	2307      	movs	r3, #7
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	480d      	ldr	r0, [pc, #52]	; (8001504 <HAL_UART_MspInit+0xbc>)
 80014ce:	f000 faf1 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80014d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e4:	2307      	movs	r3, #7
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <HAL_UART_MspInit+0xc0>)
 80014f0:	f000 fae0 	bl	8001ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	; 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40011000 	.word	0x40011000
 8001500:	40023800 	.word	0x40023800
 8001504:	40020400 	.word	0x40020400
 8001508:	40020000 	.word	0x40020000

0800150c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001520:	4b3a      	ldr	r3, [pc, #232]	; (800160c <HAL_FMC_MspInit+0x100>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d16d      	bne.n	8001604 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001528:	4b38      	ldr	r3, [pc, #224]	; (800160c <HAL_FMC_MspInit+0x100>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800152e:	4b38      	ldr	r3, [pc, #224]	; (8001610 <HAL_FMC_MspInit+0x104>)
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	4a37      	ldr	r2, [pc, #220]	; (8001610 <HAL_FMC_MspInit+0x104>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6393      	str	r3, [r2, #56]	; 0x38
 800153a:	4b35      	ldr	r3, [pc, #212]	; (8001610 <HAL_FMC_MspInit+0x104>)
 800153c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001546:	f64f 7383 	movw	r3, #65411	; 0xff83
 800154a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001558:	230c      	movs	r3, #12
 800155a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	482c      	ldr	r0, [pc, #176]	; (8001614 <HAL_FMC_MspInit+0x108>)
 8001562:	f000 faa7 	bl	8001ab4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8001566:	f248 1333 	movw	r3, #33075	; 0x8133
 800156a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001578:	230c      	movs	r3, #12
 800157a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	4619      	mov	r1, r3
 8001580:	4825      	ldr	r0, [pc, #148]	; (8001618 <HAL_FMC_MspInit+0x10c>)
 8001582:	f000 fa97 	bl	8001ab4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001586:	f24c 7303 	movw	r3, #50947	; 0xc703
 800158a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001598:	230c      	movs	r3, #12
 800159a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	481e      	ldr	r0, [pc, #120]	; (800161c <HAL_FMC_MspInit+0x110>)
 80015a2:	f000 fa87 	bl	8001ab4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80015a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80015aa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015b8:	230c      	movs	r3, #12
 80015ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4817      	ldr	r0, [pc, #92]	; (8001620 <HAL_FMC_MspInit+0x114>)
 80015c2:	f000 fa77 	bl	8001ab4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80015c6:	2328      	movs	r3, #40	; 0x28
 80015c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d6:	230c      	movs	r3, #12
 80015d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4811      	ldr	r0, [pc, #68]	; (8001624 <HAL_FMC_MspInit+0x118>)
 80015e0:	f000 fa68 	bl	8001ab4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80015e4:	2308      	movs	r3, #8
 80015e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015f4:	230c      	movs	r3, #12
 80015f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <HAL_FMC_MspInit+0x11c>)
 80015fe:	f000 fa59 	bl	8001ab4 <HAL_GPIO_Init>
 8001602:	e000      	b.n	8001606 <HAL_FMC_MspInit+0xfa>
    return;
 8001604:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000815c 	.word	0x2000815c
 8001610:	40023800 	.word	0x40023800
 8001614:	40021000 	.word	0x40021000
 8001618:	40021800 	.word	0x40021800
 800161c:	40020c00 	.word	0x40020c00
 8001620:	40021400 	.word	0x40021400
 8001624:	40021c00 	.word	0x40021c00
 8001628:	40020800 	.word	0x40020800

0800162c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001634:	f7ff ff6a 	bl	800150c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 f90c 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	e00a      	b.n	80016bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016a6:	f3af 8000 	nop.w
 80016aa:	4601      	mov	r1, r0
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	60ba      	str	r2, [r7, #8]
 80016b2:	b2ca      	uxtb	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbf0      	blt.n	80016a6 <_read+0x12>
	}

return len;
 80016c4:	687b      	ldr	r3, [r7, #4]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
	return -1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f6:	605a      	str	r2, [r3, #4]
	return 0;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_isatty>:

int _isatty(int file)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
	return 1;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
	return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <_sbrk+0x5c>)
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <_sbrk+0x60>)
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <_sbrk+0x64>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <_sbrk+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	d207      	bcs.n	8001778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001768:	f001 fe84 	bl	8003474 <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	220c      	movs	r2, #12
 8001770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e009      	b.n	800178c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <_sbrk+0x64>)
 8001788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20050000 	.word	0x20050000
 8001798:	00000400 	.word	0x00000400
 800179c:	20008160 	.word	0x20008160
 80017a0:	20008178 	.word	0x20008178

080017a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <SystemInit+0x20>)
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <SystemInit+0x20>)
 80017b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ce:	490e      	ldr	r1, [pc, #56]	; (8001808 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e4:	4c0b      	ldr	r4, [pc, #44]	; (8001814 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017f2:	f7ff ffd7 	bl	80017a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f001 fe43 	bl	8003480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7fe ff07 	bl	800060c <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001800:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800180c:	08003f8c 	.word	0x08003f8c
  ldr r2, =_sbss
 8001810:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001814:	20008178 	.word	0x20008178

08001818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_Init+0x28>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a07      	ldr	r2, [pc, #28]	; (8001844 <HAL_Init+0x28>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800182c:	2003      	movs	r0, #3
 800182e:	f000 f90d 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001832:	2000      	movs	r0, #0
 8001834:	f000 f808 	bl	8001848 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001838:	f7ff fde2 	bl	8001400 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023c00 	.word	0x40023c00

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_InitTick+0x54>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x58>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4619      	mov	r1, r3
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001862:	fbb2 f3f3 	udiv	r3, r2, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f917 	bl	8001a9a <HAL_SYSTICK_Config>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e00e      	b.n	8001894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d80a      	bhi.n	8001892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f000 f8ed 	bl	8001a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001888:	4a06      	ldr	r2, [pc, #24]	; (80018a4 <HAL_InitTick+0x5c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000004 	.word	0x20000004

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20008164 	.word	0x20008164

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20008164 	.word	0x20008164

080018e8 <__NVIC_SetPriorityGrouping>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <__NVIC_SetPriorityGrouping+0x40>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	4313      	orrs	r3, r2
 8001914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001916:	4a04      	ldr	r2, [pc, #16]	; (8001928 <__NVIC_SetPriorityGrouping+0x40>)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60d3      	str	r3, [r2, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00
 800192c:	05fa0000 	.word	0x05fa0000

08001930 <__NVIC_GetPriorityGrouping>:
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_SetPriority>:
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a18:	d301      	bcc.n	8001a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00f      	b.n	8001a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <SysTick_Config+0x40>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a26:	210f      	movs	r1, #15
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f7ff ff8e 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <SysTick_Config+0x40>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <SysTick_Config+0x40>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff47 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a74:	f7ff ff5c 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7ff ff8e 	bl	80019a0 <NVIC_EncodePriority>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff5d 	bl	800194c <__NVIC_SetPriority>
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffb0 	bl	8001a08 <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	e175      	b.n	8001dc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f040 8164 	bne.w	8001dba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d00b      	beq.n	8001b12 <HAL_GPIO_Init+0x5e>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d007      	beq.n	8001b12 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b06:	2b11      	cmp	r3, #17
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b12      	cmp	r3, #18
 8001b10:	d130      	bne.n	8001b74 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 0201 	and.w	r2, r3, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d003      	beq.n	8001bb4 <HAL_GPIO_Init+0x100>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b12      	cmp	r3, #18
 8001bb2:	d123      	bne.n	8001bfc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3208      	adds	r2, #8
 8001bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	08da      	lsrs	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3208      	adds	r2, #8
 8001bf6:	69b9      	ldr	r1, [r7, #24]
 8001bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0203 	and.w	r2, r3, #3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80be 	beq.w	8001dba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3e:	4b66      	ldr	r3, [pc, #408]	; (8001dd8 <HAL_GPIO_Init+0x324>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a65      	ldr	r2, [pc, #404]	; (8001dd8 <HAL_GPIO_Init+0x324>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <HAL_GPIO_Init+0x324>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c56:	4a61      	ldr	r2, [pc, #388]	; (8001ddc <HAL_GPIO_Init+0x328>)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <HAL_GPIO_Init+0x32c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d037      	beq.n	8001cf2 <HAL_GPIO_Init+0x23e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a57      	ldr	r2, [pc, #348]	; (8001de4 <HAL_GPIO_Init+0x330>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d031      	beq.n	8001cee <HAL_GPIO_Init+0x23a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a56      	ldr	r2, [pc, #344]	; (8001de8 <HAL_GPIO_Init+0x334>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d02b      	beq.n	8001cea <HAL_GPIO_Init+0x236>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a55      	ldr	r2, [pc, #340]	; (8001dec <HAL_GPIO_Init+0x338>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d025      	beq.n	8001ce6 <HAL_GPIO_Init+0x232>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a54      	ldr	r2, [pc, #336]	; (8001df0 <HAL_GPIO_Init+0x33c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01f      	beq.n	8001ce2 <HAL_GPIO_Init+0x22e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a53      	ldr	r2, [pc, #332]	; (8001df4 <HAL_GPIO_Init+0x340>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d019      	beq.n	8001cde <HAL_GPIO_Init+0x22a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_GPIO_Init+0x344>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_GPIO_Init+0x226>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <HAL_GPIO_Init+0x348>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_GPIO_Init+0x222>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a50      	ldr	r2, [pc, #320]	; (8001e00 <HAL_GPIO_Init+0x34c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <HAL_GPIO_Init+0x21e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4f      	ldr	r2, [pc, #316]	; (8001e04 <HAL_GPIO_Init+0x350>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <HAL_GPIO_Init+0x21a>
 8001cca:	2309      	movs	r3, #9
 8001ccc:	e012      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cce:	230a      	movs	r3, #10
 8001cd0:	e010      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cd2:	2308      	movs	r3, #8
 8001cd4:	e00e      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	e00c      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cda:	2306      	movs	r3, #6
 8001cdc:	e00a      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cde:	2305      	movs	r3, #5
 8001ce0:	e008      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e004      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e002      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_GPIO_Init+0x240>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	f002 0203 	and.w	r2, r2, #3
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	4093      	lsls	r3, r2
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d04:	4935      	ldr	r1, [pc, #212]	; (8001ddc <HAL_GPIO_Init+0x328>)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	089b      	lsrs	r3, r3, #2
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d12:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <HAL_GPIO_Init+0x354>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d36:	4a34      	ldr	r2, [pc, #208]	; (8001e08 <HAL_GPIO_Init+0x354>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d3c:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <HAL_GPIO_Init+0x354>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d60:	4a29      	ldr	r2, [pc, #164]	; (8001e08 <HAL_GPIO_Init+0x354>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d66:	4b28      	ldr	r3, [pc, #160]	; (8001e08 <HAL_GPIO_Init+0x354>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d8a:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <HAL_GPIO_Init+0x354>)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_GPIO_Init+0x354>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <HAL_GPIO_Init+0x354>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b0f      	cmp	r3, #15
 8001dc4:	f67f ae86 	bls.w	8001ad4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	40020000 	.word	0x40020000
 8001de4:	40020400 	.word	0x40020400
 8001de8:	40020800 	.word	0x40020800
 8001dec:	40020c00 	.word	0x40020c00
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40021400 	.word	0x40021400
 8001df8:	40021800 	.word	0x40021800
 8001dfc:	40021c00 	.word	0x40021c00
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40022400 	.word	0x40022400
 8001e08:	40013c00 	.word	0x40013c00

08001e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e1c:	787b      	ldrb	r3, [r7, #1]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e28:	e003      	b.n	8001e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	041a      	lsls	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e62:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e6e:	f7ff fd2f 	bl	80018d0 <HAL_GetTick>
 8001e72:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e74:	e009      	b.n	8001e8a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e76:	f7ff fd2b 	bl	80018d0 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e84:	d901      	bls.n	8001e8a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e022      	b.n	8001ed0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e96:	d1ee      	bne.n	8001e76 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a0f      	ldr	r2, [pc, #60]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea4:	f7ff fd14 	bl	80018d0 <HAL_GetTick>
 8001ea8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eaa:	e009      	b.n	8001ec0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eac:	f7ff fd10 	bl	80018d0 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eba:	d901      	bls.n	8001ec0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e007      	b.n	8001ed0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ecc:	d1ee      	bne.n	8001eac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40007000 	.word	0x40007000

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e291      	b.n	800241a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8087 	beq.w	8002012 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f04:	4b96      	ldr	r3, [pc, #600]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 030c 	and.w	r3, r3, #12
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d00c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f10:	4b93      	ldr	r3, [pc, #588]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d112      	bne.n	8001f42 <HAL_RCC_OscConfig+0x62>
 8001f1c:	4b90      	ldr	r3, [pc, #576]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f28:	d10b      	bne.n	8001f42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2a:	4b8d      	ldr	r3, [pc, #564]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d06c      	beq.n	8002010 <HAL_RCC_OscConfig+0x130>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d168      	bne.n	8002010 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e26b      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x7a>
 8001f4c:	4b84      	ldr	r3, [pc, #528]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a83      	ldr	r2, [pc, #524]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e02e      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x9c>
 8001f62:	4b7f      	ldr	r3, [pc, #508]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7e      	ldr	r2, [pc, #504]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b7c      	ldr	r3, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7b      	ldr	r2, [pc, #492]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01d      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xc0>
 8001f86:	4b76      	ldr	r3, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a75      	ldr	r2, [pc, #468]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b73      	ldr	r3, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a72      	ldr	r2, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xd8>
 8001fa0:	4b6f      	ldr	r3, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6e      	ldr	r2, [pc, #440]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b6c      	ldr	r3, [pc, #432]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a6b      	ldr	r2, [pc, #428]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fc86 	bl	80018d0 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fc82 	bl	80018d0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e21f      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fda:	4b61      	ldr	r3, [pc, #388]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xe8>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fc72 	bl	80018d0 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fc6e 	bl	80018d0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e20b      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002002:	4b57      	ldr	r3, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x110>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d069      	beq.n	80020f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201e:	4b50      	ldr	r3, [pc, #320]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b08      	cmp	r3, #8
 8002034:	d11c      	bne.n	8002070 <HAL_RCC_OscConfig+0x190>
 8002036:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x17a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1df      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b41      	ldr	r3, [pc, #260]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	493d      	ldr	r1, [pc, #244]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e040      	b.n	80020f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d023      	beq.n	80020c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff fc24 	bl	80018d0 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208c:	f7ff fc20 	bl	80018d0 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1bd      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4929      	ldr	r1, [pc, #164]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]
 80020be:	e018      	b.n	80020f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7ff fc00 	bl	80018d0 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d4:	f7ff fbfc 	bl	80018d0 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e199      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d038      	beq.n	8002170 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d019      	beq.n	800213a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210a:	4a15      	ldr	r2, [pc, #84]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002112:	f7ff fbdd 	bl	80018d0 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211a:	f7ff fbd9 	bl	80018d0 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e176      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800212e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x23a>
 8002138:	e01a      	b.n	8002170 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800213c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213e:	4a08      	ldr	r2, [pc, #32]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002146:	f7ff fbc3 	bl	80018d0 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214e:	f7ff fbbf 	bl	80018d0 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d903      	bls.n	8002164 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e15c      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
 8002160:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002164:	4b91      	ldr	r3, [pc, #580]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ee      	bne.n	800214e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a4 	beq.w	80022c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217e:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10d      	bne.n	80021a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a87      	ldr	r2, [pc, #540]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b85      	ldr	r3, [pc, #532]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a6:	4b82      	ldr	r3, [pc, #520]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d118      	bne.n	80021e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021b2:	4b7f      	ldr	r3, [pc, #508]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a7e      	ldr	r2, [pc, #504]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021be:	f7ff fb87 	bl	80018d0 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c6:	f7ff fb83 	bl	80018d0 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b64      	cmp	r3, #100	; 0x64
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e120      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d8:	4b75      	ldr	r3, [pc, #468]	; (80023b0 <HAL_RCC_OscConfig+0x4d0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x31a>
 80021ec:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	4a6e      	ldr	r2, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	6713      	str	r3, [r2, #112]	; 0x70
 80021f8:	e02d      	b.n	8002256 <HAL_RCC_OscConfig+0x376>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x33c>
 8002202:	4b6a      	ldr	r3, [pc, #424]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	4a69      	ldr	r2, [pc, #420]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002208:	f023 0301 	bic.w	r3, r3, #1
 800220c:	6713      	str	r3, [r2, #112]	; 0x70
 800220e:	4b67      	ldr	r3, [pc, #412]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a66      	ldr	r2, [pc, #408]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002214:	f023 0304 	bic.w	r3, r3, #4
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	e01c      	b.n	8002256 <HAL_RCC_OscConfig+0x376>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b05      	cmp	r3, #5
 8002222:	d10c      	bne.n	800223e <HAL_RCC_OscConfig+0x35e>
 8002224:	4b61      	ldr	r3, [pc, #388]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	4a60      	ldr	r2, [pc, #384]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800222a:	f043 0304 	orr.w	r3, r3, #4
 800222e:	6713      	str	r3, [r2, #112]	; 0x70
 8002230:	4b5e      	ldr	r3, [pc, #376]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	4a5d      	ldr	r2, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6713      	str	r3, [r2, #112]	; 0x70
 800223c:	e00b      	b.n	8002256 <HAL_RCC_OscConfig+0x376>
 800223e:	4b5b      	ldr	r3, [pc, #364]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a5a      	ldr	r2, [pc, #360]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
 800224a:	4b58      	ldr	r3, [pc, #352]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800224c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224e:	4a57      	ldr	r2, [pc, #348]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d015      	beq.n	800228a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7ff fb37 	bl	80018d0 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7ff fb33 	bl	80018d0 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0ce      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800227c:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0ee      	beq.n	8002266 <HAL_RCC_OscConfig+0x386>
 8002288:	e014      	b.n	80022b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228a:	f7ff fb21 	bl	80018d0 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002290:	e00a      	b.n	80022a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7ff fb1d 	bl	80018d0 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e0b8      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a8:	4b40      	ldr	r3, [pc, #256]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1ee      	bne.n	8002292 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022b4:	7dfb      	ldrb	r3, [r7, #23]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d105      	bne.n	80022c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ba:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a3b      	ldr	r2, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 80022c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80a4 	beq.w	8002418 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d0:	4b36      	ldr	r3, [pc, #216]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d06b      	beq.n	80023b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d149      	bne.n	8002378 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a30      	ldr	r2, [pc, #192]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 80022ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7ff faee 	bl	80018d0 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7ff faea 	bl	80018d0 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e087      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230a:	4b28      	ldr	r3, [pc, #160]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69da      	ldr	r2, [r3, #28]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	019b      	lsls	r3, r3, #6
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	3b01      	subs	r3, #1
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	4313      	orrs	r3, r2
 800233c:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800233e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002342:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800234a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7ff fabe 	bl	80018d0 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7ff faba 	bl	80018d0 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e057      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x478>
 8002376:	e04f      	b.n	8002418 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800237e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff faa4 	bl	80018d0 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7ff faa0 	bl	80018d0 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e03d      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239e:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x4ac>
 80023aa:	e035      	b.n	8002418 <HAL_RCC_OscConfig+0x538>
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x544>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d028      	beq.n	8002414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d121      	bne.n	8002414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d11a      	bne.n	8002414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023e4:	4013      	ands	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d111      	bne.n	8002414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	085b      	lsrs	r3, r3, #1
 80023fc:	3b01      	subs	r3, #1
 80023fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d107      	bne.n	8002414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800

08002428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0d0      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d910      	bls.n	8002470 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b67      	ldr	r3, [pc, #412]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 020f 	bic.w	r2, r3, #15
 8002456:	4965      	ldr	r1, [pc, #404]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0b8      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002488:	4b59      	ldr	r3, [pc, #356]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a58      	ldr	r2, [pc, #352]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 800248e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002492:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a0:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80024a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	494d      	ldr	r1, [pc, #308]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d040      	beq.n	800254c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d115      	bne.n	800250a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e07f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e073      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06b      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4936      	ldr	r1, [pc, #216]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	4313      	orrs	r3, r2
 800251a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800251c:	f7ff f9d8 	bl	80018d0 <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7ff f9d4 	bl	80018d0 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e053      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 020c 	and.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1eb      	bne.n	8002524 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d210      	bcs.n	800257c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 020f 	bic.w	r2, r3, #15
 8002562:	4922      	ldr	r1, [pc, #136]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e032      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4916      	ldr	r1, [pc, #88]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	490e      	ldr	r1, [pc, #56]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ba:	f000 f821 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025be:	4602      	mov	r2, r0
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	490a      	ldr	r1, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x1cc>)
 80025cc:	5ccb      	ldrb	r3, [r1, r3]
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x1d0>)
 80025d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1d4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff f934 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023c00 	.word	0x40023c00
 80025f0:	40023800 	.word	0x40023800
 80025f4:	08003f00 	.word	0x08003f00
 80025f8:	20000000 	.word	0x20000000
 80025fc:	20000004 	.word	0x20000004

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002604:	b090      	sub	sp, #64	; 0x40
 8002606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
 800260c:	2300      	movs	r3, #0
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002610:	2300      	movs	r3, #0
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_RCC_GetSysClockFreq+0x180>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b08      	cmp	r3, #8
 8002622:	d00d      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x40>
 8002624:	2b08      	cmp	r3, #8
 8002626:	f200 80a1 	bhi.w	800276c <HAL_RCC_GetSysClockFreq+0x16c>
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x34>
 800262e:	2b04      	cmp	r3, #4
 8002630:	d003      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0x3a>
 8002632:	e09b      	b.n	800276c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_GetSysClockFreq+0x184>)
 8002636:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002638:	e09b      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800263a:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_GetSysClockFreq+0x188>)
 800263c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800263e:	e098      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <HAL_RCC_GetSysClockFreq+0x180>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002648:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800264a:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <HAL_RCC_GetSysClockFreq+0x180>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d028      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002656:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_RCC_GetSysClockFreq+0x180>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	099b      	lsrs	r3, r3, #6
 800265c:	2200      	movs	r2, #0
 800265e:	623b      	str	r3, [r7, #32]
 8002660:	627a      	str	r2, [r7, #36]	; 0x24
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002668:	2100      	movs	r1, #0
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_GetSysClockFreq+0x188>)
 800266c:	fb03 f201 	mul.w	r2, r3, r1
 8002670:	2300      	movs	r3, #0
 8002672:	fb00 f303 	mul.w	r3, r0, r3
 8002676:	4413      	add	r3, r2
 8002678:	4a43      	ldr	r2, [pc, #268]	; (8002788 <HAL_RCC_GetSysClockFreq+0x188>)
 800267a:	fba0 1202 	umull	r1, r2, r0, r2
 800267e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002680:	460a      	mov	r2, r1
 8002682:	62ba      	str	r2, [r7, #40]	; 0x28
 8002684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002686:	4413      	add	r3, r2
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268c:	2200      	movs	r2, #0
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	61fa      	str	r2, [r7, #28]
 8002692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002696:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800269a:	f7fd fdb5 	bl	8000208 <__aeabi_uldivmod>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4613      	mov	r3, r2
 80026a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a6:	e053      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a8:	4b35      	ldr	r3, [pc, #212]	; (8002780 <HAL_RCC_GetSysClockFreq+0x180>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	2200      	movs	r2, #0
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	617a      	str	r2, [r7, #20]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026ba:	f04f 0b00 	mov.w	fp, #0
 80026be:	4652      	mov	r2, sl
 80026c0:	465b      	mov	r3, fp
 80026c2:	f04f 0000 	mov.w	r0, #0
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	0159      	lsls	r1, r3, #5
 80026cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d0:	0150      	lsls	r0, r2, #5
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	ebb2 080a 	subs.w	r8, r2, sl
 80026da:	eb63 090b 	sbc.w	r9, r3, fp
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026f2:	ebb2 0408 	subs.w	r4, r2, r8
 80026f6:	eb63 0509 	sbc.w	r5, r3, r9
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	00eb      	lsls	r3, r5, #3
 8002704:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002708:	00e2      	lsls	r2, r4, #3
 800270a:	4614      	mov	r4, r2
 800270c:	461d      	mov	r5, r3
 800270e:	eb14 030a 	adds.w	r3, r4, sl
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	eb45 030b 	adc.w	r3, r5, fp
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002726:	4629      	mov	r1, r5
 8002728:	028b      	lsls	r3, r1, #10
 800272a:	4621      	mov	r1, r4
 800272c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002730:	4621      	mov	r1, r4
 8002732:	028a      	lsls	r2, r1, #10
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273a:	2200      	movs	r2, #0
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	60fa      	str	r2, [r7, #12]
 8002740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002744:	f7fd fd60 	bl	8000208 <__aeabi_uldivmod>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4613      	mov	r3, r2
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_GetSysClockFreq+0x180>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	3301      	adds	r3, #1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800276a:	e002      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_GetSysClockFreq+0x184>)
 800276e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002774:	4618      	mov	r0, r3
 8002776:	3740      	adds	r7, #64	; 0x40
 8002778:	46bd      	mov	sp, r7
 800277a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	00f42400 	.word	0x00f42400
 8002788:	017d7840 	.word	0x017d7840

0800278c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000000 	.word	0x20000000

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027a8:	f7ff fff0 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0a9b      	lsrs	r3, r3, #10
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4903      	ldr	r1, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	08003f10 	.word	0x08003f10

080027cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027d0:	f7ff ffdc 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0b5b      	lsrs	r3, r3, #13
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	08003f10 	.word	0x08003f10

080027f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e025      	b.n	8002854 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d106      	bne.n	8002822 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7fe ff05 	bl	800162c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	4619      	mov	r1, r3
 8002834:	4610      	mov	r0, r2
 8002836:	f000 fcf3 	bl	8003220 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	461a      	mov	r2, r3
 8002844:	6839      	ldr	r1, [r7, #0]
 8002846:	f000 fd5d 	bl	8003304 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d101      	bne.n	8002878 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
 8002876:	e018      	b.n	80028aa <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fdbb 	bl	8003404 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d104      	bne.n	80028a0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2205      	movs	r2, #5
 800289a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800289e:	e003      	b.n	80028a8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d101      	bne.n	80028cc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80028c8:	2302      	movs	r3, #2
 80028ca:	e00e      	b.n	80028ea <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6839      	ldr	r1, [r7, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fdb6 	bl	800344c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e040      	b.n	8002986 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002908:	2b00      	cmp	r3, #0
 800290a:	d106      	bne.n	800291a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7fe fd97 	bl	8001448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2224      	movs	r2, #36	; 0x24
 800291e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0201 	bic.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f8bf 	bl	8002ab4 <UART_SetConfig>
 8002936:	4603      	mov	r3, r0
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e022      	b.n	8002986 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fb17 	bl	8002f7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800295c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800296c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0201 	orr.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fb9e 	bl	80030c0 <UART_CheckIdleState>
 8002984:	4603      	mov	r3, r0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b08a      	sub	sp, #40	; 0x28
 8002992:	af02      	add	r7, sp, #8
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	4613      	mov	r3, r2
 800299c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	f040 8081 	bne.w	8002aaa <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_UART_Transmit+0x26>
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e079      	b.n	8002aac <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Transmit+0x38>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e072      	b.n	8002aac <HAL_UART_Transmit+0x11e>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2221      	movs	r2, #33	; 0x21
 80029da:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029dc:	f7fe ff78 	bl	80018d0 <HAL_GetTick>
 80029e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	88fa      	ldrh	r2, [r7, #6]
 80029e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fa:	d108      	bne.n	8002a0e <HAL_UART_Transmit+0x80>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	e003      	b.n	8002a16 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a1e:	e02c      	b.n	8002a7a <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2200      	movs	r2, #0
 8002a28:	2180      	movs	r1, #128	; 0x80
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fb7b 	bl	8003126 <UART_WaitOnFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e038      	b.n	8002aac <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	3302      	adds	r3, #2
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e007      	b.n	8002a68 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3301      	adds	r3, #1
 8002a66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1cc      	bne.n	8002a20 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2140      	movs	r1, #64	; 0x40
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fb48 	bl	8003126 <UART_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e005      	b.n	8002aac <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e000      	b.n	8002aac <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002aaa:	2302      	movs	r3, #2
  }
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4ba6      	ldr	r3, [pc, #664]	; (8002d78 <UART_SetConfig+0x2c4>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6812      	ldr	r2, [r2, #0]
 8002ae6:	6979      	ldr	r1, [r7, #20]
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a94      	ldr	r2, [pc, #592]	; (8002d7c <UART_SetConfig+0x2c8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d120      	bne.n	8002b72 <UART_SetConfig+0xbe>
 8002b30:	4b93      	ldr	r3, [pc, #588]	; (8002d80 <UART_SetConfig+0x2cc>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d816      	bhi.n	8002b6c <UART_SetConfig+0xb8>
 8002b3e:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <UART_SetConfig+0x90>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b55 	.word	0x08002b55
 8002b48:	08002b61 	.word	0x08002b61
 8002b4c:	08002b5b 	.word	0x08002b5b
 8002b50:	08002b67 	.word	0x08002b67
 8002b54:	2301      	movs	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]
 8002b58:	e150      	b.n	8002dfc <UART_SetConfig+0x348>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	77fb      	strb	r3, [r7, #31]
 8002b5e:	e14d      	b.n	8002dfc <UART_SetConfig+0x348>
 8002b60:	2304      	movs	r3, #4
 8002b62:	77fb      	strb	r3, [r7, #31]
 8002b64:	e14a      	b.n	8002dfc <UART_SetConfig+0x348>
 8002b66:	2308      	movs	r3, #8
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	e147      	b.n	8002dfc <UART_SetConfig+0x348>
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e144      	b.n	8002dfc <UART_SetConfig+0x348>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a83      	ldr	r2, [pc, #524]	; (8002d84 <UART_SetConfig+0x2d0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d132      	bne.n	8002be2 <UART_SetConfig+0x12e>
 8002b7c:	4b80      	ldr	r3, [pc, #512]	; (8002d80 <UART_SetConfig+0x2cc>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d828      	bhi.n	8002bdc <UART_SetConfig+0x128>
 8002b8a:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <UART_SetConfig+0xdc>)
 8002b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b90:	08002bc5 	.word	0x08002bc5
 8002b94:	08002bdd 	.word	0x08002bdd
 8002b98:	08002bdd 	.word	0x08002bdd
 8002b9c:	08002bdd 	.word	0x08002bdd
 8002ba0:	08002bd1 	.word	0x08002bd1
 8002ba4:	08002bdd 	.word	0x08002bdd
 8002ba8:	08002bdd 	.word	0x08002bdd
 8002bac:	08002bdd 	.word	0x08002bdd
 8002bb0:	08002bcb 	.word	0x08002bcb
 8002bb4:	08002bdd 	.word	0x08002bdd
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002bdd 	.word	0x08002bdd
 8002bc0:	08002bd7 	.word	0x08002bd7
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	e118      	b.n	8002dfc <UART_SetConfig+0x348>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	77fb      	strb	r3, [r7, #31]
 8002bce:	e115      	b.n	8002dfc <UART_SetConfig+0x348>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e112      	b.n	8002dfc <UART_SetConfig+0x348>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	77fb      	strb	r3, [r7, #31]
 8002bda:	e10f      	b.n	8002dfc <UART_SetConfig+0x348>
 8002bdc:	2310      	movs	r3, #16
 8002bde:	77fb      	strb	r3, [r7, #31]
 8002be0:	e10c      	b.n	8002dfc <UART_SetConfig+0x348>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a68      	ldr	r2, [pc, #416]	; (8002d88 <UART_SetConfig+0x2d4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d120      	bne.n	8002c2e <UART_SetConfig+0x17a>
 8002bec:	4b64      	ldr	r3, [pc, #400]	; (8002d80 <UART_SetConfig+0x2cc>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002bf6:	2b30      	cmp	r3, #48	; 0x30
 8002bf8:	d013      	beq.n	8002c22 <UART_SetConfig+0x16e>
 8002bfa:	2b30      	cmp	r3, #48	; 0x30
 8002bfc:	d814      	bhi.n	8002c28 <UART_SetConfig+0x174>
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	d009      	beq.n	8002c16 <UART_SetConfig+0x162>
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d810      	bhi.n	8002c28 <UART_SetConfig+0x174>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <UART_SetConfig+0x15c>
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d006      	beq.n	8002c1c <UART_SetConfig+0x168>
 8002c0e:	e00b      	b.n	8002c28 <UART_SetConfig+0x174>
 8002c10:	2300      	movs	r3, #0
 8002c12:	77fb      	strb	r3, [r7, #31]
 8002c14:	e0f2      	b.n	8002dfc <UART_SetConfig+0x348>
 8002c16:	2302      	movs	r3, #2
 8002c18:	77fb      	strb	r3, [r7, #31]
 8002c1a:	e0ef      	b.n	8002dfc <UART_SetConfig+0x348>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	77fb      	strb	r3, [r7, #31]
 8002c20:	e0ec      	b.n	8002dfc <UART_SetConfig+0x348>
 8002c22:	2308      	movs	r3, #8
 8002c24:	77fb      	strb	r3, [r7, #31]
 8002c26:	e0e9      	b.n	8002dfc <UART_SetConfig+0x348>
 8002c28:	2310      	movs	r3, #16
 8002c2a:	77fb      	strb	r3, [r7, #31]
 8002c2c:	e0e6      	b.n	8002dfc <UART_SetConfig+0x348>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a56      	ldr	r2, [pc, #344]	; (8002d8c <UART_SetConfig+0x2d8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d120      	bne.n	8002c7a <UART_SetConfig+0x1c6>
 8002c38:	4b51      	ldr	r3, [pc, #324]	; (8002d80 <UART_SetConfig+0x2cc>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c42:	2bc0      	cmp	r3, #192	; 0xc0
 8002c44:	d013      	beq.n	8002c6e <UART_SetConfig+0x1ba>
 8002c46:	2bc0      	cmp	r3, #192	; 0xc0
 8002c48:	d814      	bhi.n	8002c74 <UART_SetConfig+0x1c0>
 8002c4a:	2b80      	cmp	r3, #128	; 0x80
 8002c4c:	d009      	beq.n	8002c62 <UART_SetConfig+0x1ae>
 8002c4e:	2b80      	cmp	r3, #128	; 0x80
 8002c50:	d810      	bhi.n	8002c74 <UART_SetConfig+0x1c0>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <UART_SetConfig+0x1a8>
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d006      	beq.n	8002c68 <UART_SetConfig+0x1b4>
 8002c5a:	e00b      	b.n	8002c74 <UART_SetConfig+0x1c0>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	77fb      	strb	r3, [r7, #31]
 8002c60:	e0cc      	b.n	8002dfc <UART_SetConfig+0x348>
 8002c62:	2302      	movs	r3, #2
 8002c64:	77fb      	strb	r3, [r7, #31]
 8002c66:	e0c9      	b.n	8002dfc <UART_SetConfig+0x348>
 8002c68:	2304      	movs	r3, #4
 8002c6a:	77fb      	strb	r3, [r7, #31]
 8002c6c:	e0c6      	b.n	8002dfc <UART_SetConfig+0x348>
 8002c6e:	2308      	movs	r3, #8
 8002c70:	77fb      	strb	r3, [r7, #31]
 8002c72:	e0c3      	b.n	8002dfc <UART_SetConfig+0x348>
 8002c74:	2310      	movs	r3, #16
 8002c76:	77fb      	strb	r3, [r7, #31]
 8002c78:	e0c0      	b.n	8002dfc <UART_SetConfig+0x348>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a44      	ldr	r2, [pc, #272]	; (8002d90 <UART_SetConfig+0x2dc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d125      	bne.n	8002cd0 <UART_SetConfig+0x21c>
 8002c84:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <UART_SetConfig+0x2cc>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c92:	d017      	beq.n	8002cc4 <UART_SetConfig+0x210>
 8002c94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c98:	d817      	bhi.n	8002cca <UART_SetConfig+0x216>
 8002c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9e:	d00b      	beq.n	8002cb8 <UART_SetConfig+0x204>
 8002ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ca4:	d811      	bhi.n	8002cca <UART_SetConfig+0x216>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <UART_SetConfig+0x1fe>
 8002caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cae:	d006      	beq.n	8002cbe <UART_SetConfig+0x20a>
 8002cb0:	e00b      	b.n	8002cca <UART_SetConfig+0x216>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	77fb      	strb	r3, [r7, #31]
 8002cb6:	e0a1      	b.n	8002dfc <UART_SetConfig+0x348>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	77fb      	strb	r3, [r7, #31]
 8002cbc:	e09e      	b.n	8002dfc <UART_SetConfig+0x348>
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	77fb      	strb	r3, [r7, #31]
 8002cc2:	e09b      	b.n	8002dfc <UART_SetConfig+0x348>
 8002cc4:	2308      	movs	r3, #8
 8002cc6:	77fb      	strb	r3, [r7, #31]
 8002cc8:	e098      	b.n	8002dfc <UART_SetConfig+0x348>
 8002cca:	2310      	movs	r3, #16
 8002ccc:	77fb      	strb	r3, [r7, #31]
 8002cce:	e095      	b.n	8002dfc <UART_SetConfig+0x348>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <UART_SetConfig+0x2e0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d125      	bne.n	8002d26 <UART_SetConfig+0x272>
 8002cda:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <UART_SetConfig+0x2cc>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ce4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ce8:	d017      	beq.n	8002d1a <UART_SetConfig+0x266>
 8002cea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cee:	d817      	bhi.n	8002d20 <UART_SetConfig+0x26c>
 8002cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf4:	d00b      	beq.n	8002d0e <UART_SetConfig+0x25a>
 8002cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cfa:	d811      	bhi.n	8002d20 <UART_SetConfig+0x26c>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <UART_SetConfig+0x254>
 8002d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d04:	d006      	beq.n	8002d14 <UART_SetConfig+0x260>
 8002d06:	e00b      	b.n	8002d20 <UART_SetConfig+0x26c>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e076      	b.n	8002dfc <UART_SetConfig+0x348>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	77fb      	strb	r3, [r7, #31]
 8002d12:	e073      	b.n	8002dfc <UART_SetConfig+0x348>
 8002d14:	2304      	movs	r3, #4
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e070      	b.n	8002dfc <UART_SetConfig+0x348>
 8002d1a:	2308      	movs	r3, #8
 8002d1c:	77fb      	strb	r3, [r7, #31]
 8002d1e:	e06d      	b.n	8002dfc <UART_SetConfig+0x348>
 8002d20:	2310      	movs	r3, #16
 8002d22:	77fb      	strb	r3, [r7, #31]
 8002d24:	e06a      	b.n	8002dfc <UART_SetConfig+0x348>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1b      	ldr	r2, [pc, #108]	; (8002d98 <UART_SetConfig+0x2e4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d138      	bne.n	8002da2 <UART_SetConfig+0x2ee>
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <UART_SetConfig+0x2cc>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d3e:	d017      	beq.n	8002d70 <UART_SetConfig+0x2bc>
 8002d40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d44:	d82a      	bhi.n	8002d9c <UART_SetConfig+0x2e8>
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4a:	d00b      	beq.n	8002d64 <UART_SetConfig+0x2b0>
 8002d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d50:	d824      	bhi.n	8002d9c <UART_SetConfig+0x2e8>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <UART_SetConfig+0x2aa>
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5a:	d006      	beq.n	8002d6a <UART_SetConfig+0x2b6>
 8002d5c:	e01e      	b.n	8002d9c <UART_SetConfig+0x2e8>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	77fb      	strb	r3, [r7, #31]
 8002d62:	e04b      	b.n	8002dfc <UART_SetConfig+0x348>
 8002d64:	2302      	movs	r3, #2
 8002d66:	77fb      	strb	r3, [r7, #31]
 8002d68:	e048      	b.n	8002dfc <UART_SetConfig+0x348>
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	77fb      	strb	r3, [r7, #31]
 8002d6e:	e045      	b.n	8002dfc <UART_SetConfig+0x348>
 8002d70:	2308      	movs	r3, #8
 8002d72:	77fb      	strb	r3, [r7, #31]
 8002d74:	e042      	b.n	8002dfc <UART_SetConfig+0x348>
 8002d76:	bf00      	nop
 8002d78:	efff69f3 	.word	0xefff69f3
 8002d7c:	40011000 	.word	0x40011000
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40004400 	.word	0x40004400
 8002d88:	40004800 	.word	0x40004800
 8002d8c:	40004c00 	.word	0x40004c00
 8002d90:	40005000 	.word	0x40005000
 8002d94:	40011400 	.word	0x40011400
 8002d98:	40007800 	.word	0x40007800
 8002d9c:	2310      	movs	r3, #16
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e02c      	b.n	8002dfc <UART_SetConfig+0x348>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a72      	ldr	r2, [pc, #456]	; (8002f70 <UART_SetConfig+0x4bc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d125      	bne.n	8002df8 <UART_SetConfig+0x344>
 8002dac:	4b71      	ldr	r3, [pc, #452]	; (8002f74 <UART_SetConfig+0x4c0>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002db6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002dba:	d017      	beq.n	8002dec <UART_SetConfig+0x338>
 8002dbc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002dc0:	d817      	bhi.n	8002df2 <UART_SetConfig+0x33e>
 8002dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc6:	d00b      	beq.n	8002de0 <UART_SetConfig+0x32c>
 8002dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dcc:	d811      	bhi.n	8002df2 <UART_SetConfig+0x33e>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <UART_SetConfig+0x326>
 8002dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd6:	d006      	beq.n	8002de6 <UART_SetConfig+0x332>
 8002dd8:	e00b      	b.n	8002df2 <UART_SetConfig+0x33e>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	77fb      	strb	r3, [r7, #31]
 8002dde:	e00d      	b.n	8002dfc <UART_SetConfig+0x348>
 8002de0:	2302      	movs	r3, #2
 8002de2:	77fb      	strb	r3, [r7, #31]
 8002de4:	e00a      	b.n	8002dfc <UART_SetConfig+0x348>
 8002de6:	2304      	movs	r3, #4
 8002de8:	77fb      	strb	r3, [r7, #31]
 8002dea:	e007      	b.n	8002dfc <UART_SetConfig+0x348>
 8002dec:	2308      	movs	r3, #8
 8002dee:	77fb      	strb	r3, [r7, #31]
 8002df0:	e004      	b.n	8002dfc <UART_SetConfig+0x348>
 8002df2:	2310      	movs	r3, #16
 8002df4:	77fb      	strb	r3, [r7, #31]
 8002df6:	e001      	b.n	8002dfc <UART_SetConfig+0x348>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e04:	d15c      	bne.n	8002ec0 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8002e06:	7ffb      	ldrb	r3, [r7, #31]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d828      	bhi.n	8002e5e <UART_SetConfig+0x3aa>
 8002e0c:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <UART_SetConfig+0x360>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e39 	.word	0x08002e39
 8002e18:	08002e41 	.word	0x08002e41
 8002e1c:	08002e49 	.word	0x08002e49
 8002e20:	08002e5f 	.word	0x08002e5f
 8002e24:	08002e4f 	.word	0x08002e4f
 8002e28:	08002e5f 	.word	0x08002e5f
 8002e2c:	08002e5f 	.word	0x08002e5f
 8002e30:	08002e5f 	.word	0x08002e5f
 8002e34:	08002e57 	.word	0x08002e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e38:	f7ff fcb4 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002e3c:	61b8      	str	r0, [r7, #24]
        break;
 8002e3e:	e013      	b.n	8002e68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e40:	f7ff fcc4 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8002e44:	61b8      	str	r0, [r7, #24]
        break;
 8002e46:	e00f      	b.n	8002e68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e48:	4b4b      	ldr	r3, [pc, #300]	; (8002f78 <UART_SetConfig+0x4c4>)
 8002e4a:	61bb      	str	r3, [r7, #24]
        break;
 8002e4c:	e00c      	b.n	8002e68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e4e:	f7ff fbd7 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8002e52:	61b8      	str	r0, [r7, #24]
        break;
 8002e54:	e008      	b.n	8002e68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e5a:	61bb      	str	r3, [r7, #24]
        break;
 8002e5c:	e004      	b.n	8002e68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	77bb      	strb	r3, [r7, #30]
        break;
 8002e66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d074      	beq.n	8002f58 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	005a      	lsls	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	085b      	lsrs	r3, r3, #1
 8002e78:	441a      	add	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b0f      	cmp	r3, #15
 8002e8a:	d916      	bls.n	8002eba <UART_SetConfig+0x406>
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e92:	d212      	bcs.n	8002eba <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f023 030f 	bic.w	r3, r3, #15
 8002e9c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	89fb      	ldrh	r3, [r7, #14]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	89fa      	ldrh	r2, [r7, #14]
 8002eb6:	60da      	str	r2, [r3, #12]
 8002eb8:	e04e      	b.n	8002f58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	77bb      	strb	r3, [r7, #30]
 8002ebe:	e04b      	b.n	8002f58 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d827      	bhi.n	8002f16 <UART_SetConfig+0x462>
 8002ec6:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <UART_SetConfig+0x418>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002ef1 	.word	0x08002ef1
 8002ed0:	08002ef9 	.word	0x08002ef9
 8002ed4:	08002f01 	.word	0x08002f01
 8002ed8:	08002f17 	.word	0x08002f17
 8002edc:	08002f07 	.word	0x08002f07
 8002ee0:	08002f17 	.word	0x08002f17
 8002ee4:	08002f17 	.word	0x08002f17
 8002ee8:	08002f17 	.word	0x08002f17
 8002eec:	08002f0f 	.word	0x08002f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ef0:	f7ff fc58 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8002ef4:	61b8      	str	r0, [r7, #24]
        break;
 8002ef6:	e013      	b.n	8002f20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ef8:	f7ff fc68 	bl	80027cc <HAL_RCC_GetPCLK2Freq>
 8002efc:	61b8      	str	r0, [r7, #24]
        break;
 8002efe:	e00f      	b.n	8002f20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <UART_SetConfig+0x4c4>)
 8002f02:	61bb      	str	r3, [r7, #24]
        break;
 8002f04:	e00c      	b.n	8002f20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f06:	f7ff fb7b 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8002f0a:	61b8      	str	r0, [r7, #24]
        break;
 8002f0c:	e008      	b.n	8002f20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f12:	61bb      	str	r3, [r7, #24]
        break;
 8002f14:	e004      	b.n	8002f20 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	77bb      	strb	r3, [r7, #30]
        break;
 8002f1e:	bf00      	nop
    }

    if (pclk != 0U)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d018      	beq.n	8002f58 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	085a      	lsrs	r2, r3, #1
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	441a      	add	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b0f      	cmp	r3, #15
 8002f40:	d908      	bls.n	8002f54 <UART_SetConfig+0x4a0>
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f48:	d204      	bcs.n	8002f54 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	e001      	b.n	8002f58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f64:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40007c00 	.word	0x40007c00
 8002f74:	40023800 	.word	0x40023800
 8002f78:	00f42400 	.word	0x00f42400

08002f7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00a      	beq.n	8002fa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00a      	beq.n	800300c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01a      	beq.n	8003092 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800307a:	d10a      	bne.n	8003092 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
  }
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030d0:	f7fe fbfe 	bl	80018d0 <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d10e      	bne.n	8003102 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f817 	bl	8003126 <UART_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e00d      	b.n	800311e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	4613      	mov	r3, r2
 8003134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003136:	e05e      	b.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d05a      	beq.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003140:	f7fe fbc6 	bl	80018d0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <UART_WaitOnFlagUntilTimeout+0x30>
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d11b      	bne.n	800318e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003164:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2220      	movs	r2, #32
 8003180:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e043      	b.n	8003216 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d02c      	beq.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031aa:	d124      	bne.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e00f      	b.n	8003216 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	429a      	cmp	r2, r3
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	429a      	cmp	r2, r3
 8003212:	d091      	beq.n	8003138 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d027      	beq.n	800328a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <FMC_SDRAM_Init+0xe0>)
 8003244:	4013      	ands	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8003250:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8003256:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800325c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8003262:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8003268:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800326e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8003274:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800327a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e032      	b.n	80032f0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003296:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80032a0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80032a6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <FMC_SDRAM_Init+0xe0>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80032c4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80032ca:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80032d0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80032d6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80032dc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	ffff8000 	.word	0xffff8000

08003304 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d02e      	beq.n	800337c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800332a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	3b01      	subs	r3, #1
 8003338:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800333a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	3b01      	subs	r3, #1
 8003342:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8003344:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	3b01      	subs	r3, #1
 800334c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800334e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	3b01      	subs	r3, #1
 8003356:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8003358:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	3b01      	subs	r3, #1
 8003360:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8003362:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	3b01      	subs	r3, #1
 800336a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800336c:	4313      	orrs	r3, r2
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4313      	orrs	r3, r2
 8003372:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	609a      	str	r2, [r3, #8]
 800337a:	e039      	b.n	80033f0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <FMC_SDRAM_Timing_Init+0xfc>)
 8003386:	4013      	ands	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	3b01      	subs	r3, #1
 8003390:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	3b01      	subs	r3, #1
 8003398:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800339a:	4313      	orrs	r3, r2
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80033ae:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80033be:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80033c8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80033d2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	3b01      	subs	r3, #1
 80033da:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80033dc:	4313      	orrs	r3, r2
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	ff0f0fff 	.word	0xff0f0fff

08003404 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <FMC_SDRAM_SendCommand+0x44>)
 8003416:	4013      	ands	r3, r2
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	6811      	ldr	r1, [r2, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	6852      	ldr	r2, [r2, #4]
 8003420:	4311      	orrs	r1, r2
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	6892      	ldr	r2, [r2, #8]
 8003426:	3a01      	subs	r2, #1
 8003428:	0152      	lsls	r2, r2, #5
 800342a:	4311      	orrs	r1, r2
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	68d2      	ldr	r2, [r2, #12]
 8003430:	0252      	lsls	r2, r2, #9
 8003432:	430a      	orrs	r2, r1
 8003434:	431a      	orrs	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	ffc00000 	.word	0xffc00000

0800344c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <__errno>:
 8003474:	4b01      	ldr	r3, [pc, #4]	; (800347c <__errno+0x8>)
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	2000000c 	.word	0x2000000c

08003480 <__libc_init_array>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	4d0d      	ldr	r5, [pc, #52]	; (80034b8 <__libc_init_array+0x38>)
 8003484:	4c0d      	ldr	r4, [pc, #52]	; (80034bc <__libc_init_array+0x3c>)
 8003486:	1b64      	subs	r4, r4, r5
 8003488:	10a4      	asrs	r4, r4, #2
 800348a:	2600      	movs	r6, #0
 800348c:	42a6      	cmp	r6, r4
 800348e:	d109      	bne.n	80034a4 <__libc_init_array+0x24>
 8003490:	4d0b      	ldr	r5, [pc, #44]	; (80034c0 <__libc_init_array+0x40>)
 8003492:	4c0c      	ldr	r4, [pc, #48]	; (80034c4 <__libc_init_array+0x44>)
 8003494:	f000 fd1e 	bl	8003ed4 <_init>
 8003498:	1b64      	subs	r4, r4, r5
 800349a:	10a4      	asrs	r4, r4, #2
 800349c:	2600      	movs	r6, #0
 800349e:	42a6      	cmp	r6, r4
 80034a0:	d105      	bne.n	80034ae <__libc_init_array+0x2e>
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 80034a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a8:	4798      	blx	r3
 80034aa:	3601      	adds	r6, #1
 80034ac:	e7ee      	b.n	800348c <__libc_init_array+0xc>
 80034ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b2:	4798      	blx	r3
 80034b4:	3601      	adds	r6, #1
 80034b6:	e7f2      	b.n	800349e <__libc_init_array+0x1e>
 80034b8:	08003f84 	.word	0x08003f84
 80034bc:	08003f84 	.word	0x08003f84
 80034c0:	08003f84 	.word	0x08003f84
 80034c4:	08003f88 	.word	0x08003f88

080034c8 <memset>:
 80034c8:	4402      	add	r2, r0
 80034ca:	4603      	mov	r3, r0
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d100      	bne.n	80034d2 <memset+0xa>
 80034d0:	4770      	bx	lr
 80034d2:	f803 1b01 	strb.w	r1, [r3], #1
 80034d6:	e7f9      	b.n	80034cc <memset+0x4>

080034d8 <_puts_r>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	460e      	mov	r6, r1
 80034dc:	4605      	mov	r5, r0
 80034de:	b118      	cbz	r0, 80034e8 <_puts_r+0x10>
 80034e0:	6983      	ldr	r3, [r0, #24]
 80034e2:	b90b      	cbnz	r3, 80034e8 <_puts_r+0x10>
 80034e4:	f000 fa48 	bl	8003978 <__sinit>
 80034e8:	69ab      	ldr	r3, [r5, #24]
 80034ea:	68ac      	ldr	r4, [r5, #8]
 80034ec:	b913      	cbnz	r3, 80034f4 <_puts_r+0x1c>
 80034ee:	4628      	mov	r0, r5
 80034f0:	f000 fa42 	bl	8003978 <__sinit>
 80034f4:	4b2c      	ldr	r3, [pc, #176]	; (80035a8 <_puts_r+0xd0>)
 80034f6:	429c      	cmp	r4, r3
 80034f8:	d120      	bne.n	800353c <_puts_r+0x64>
 80034fa:	686c      	ldr	r4, [r5, #4]
 80034fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034fe:	07db      	lsls	r3, r3, #31
 8003500:	d405      	bmi.n	800350e <_puts_r+0x36>
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	0598      	lsls	r0, r3, #22
 8003506:	d402      	bmi.n	800350e <_puts_r+0x36>
 8003508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800350a:	f000 fad3 	bl	8003ab4 <__retarget_lock_acquire_recursive>
 800350e:	89a3      	ldrh	r3, [r4, #12]
 8003510:	0719      	lsls	r1, r3, #28
 8003512:	d51d      	bpl.n	8003550 <_puts_r+0x78>
 8003514:	6923      	ldr	r3, [r4, #16]
 8003516:	b1db      	cbz	r3, 8003550 <_puts_r+0x78>
 8003518:	3e01      	subs	r6, #1
 800351a:	68a3      	ldr	r3, [r4, #8]
 800351c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003520:	3b01      	subs	r3, #1
 8003522:	60a3      	str	r3, [r4, #8]
 8003524:	bb39      	cbnz	r1, 8003576 <_puts_r+0x9e>
 8003526:	2b00      	cmp	r3, #0
 8003528:	da38      	bge.n	800359c <_puts_r+0xc4>
 800352a:	4622      	mov	r2, r4
 800352c:	210a      	movs	r1, #10
 800352e:	4628      	mov	r0, r5
 8003530:	f000 f848 	bl	80035c4 <__swbuf_r>
 8003534:	3001      	adds	r0, #1
 8003536:	d011      	beq.n	800355c <_puts_r+0x84>
 8003538:	250a      	movs	r5, #10
 800353a:	e011      	b.n	8003560 <_puts_r+0x88>
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <_puts_r+0xd4>)
 800353e:	429c      	cmp	r4, r3
 8003540:	d101      	bne.n	8003546 <_puts_r+0x6e>
 8003542:	68ac      	ldr	r4, [r5, #8]
 8003544:	e7da      	b.n	80034fc <_puts_r+0x24>
 8003546:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <_puts_r+0xd8>)
 8003548:	429c      	cmp	r4, r3
 800354a:	bf08      	it	eq
 800354c:	68ec      	ldreq	r4, [r5, #12]
 800354e:	e7d5      	b.n	80034fc <_puts_r+0x24>
 8003550:	4621      	mov	r1, r4
 8003552:	4628      	mov	r0, r5
 8003554:	f000 f888 	bl	8003668 <__swsetup_r>
 8003558:	2800      	cmp	r0, #0
 800355a:	d0dd      	beq.n	8003518 <_puts_r+0x40>
 800355c:	f04f 35ff 	mov.w	r5, #4294967295
 8003560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003562:	07da      	lsls	r2, r3, #31
 8003564:	d405      	bmi.n	8003572 <_puts_r+0x9a>
 8003566:	89a3      	ldrh	r3, [r4, #12]
 8003568:	059b      	lsls	r3, r3, #22
 800356a:	d402      	bmi.n	8003572 <_puts_r+0x9a>
 800356c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800356e:	f000 faa2 	bl	8003ab6 <__retarget_lock_release_recursive>
 8003572:	4628      	mov	r0, r5
 8003574:	bd70      	pop	{r4, r5, r6, pc}
 8003576:	2b00      	cmp	r3, #0
 8003578:	da04      	bge.n	8003584 <_puts_r+0xac>
 800357a:	69a2      	ldr	r2, [r4, #24]
 800357c:	429a      	cmp	r2, r3
 800357e:	dc06      	bgt.n	800358e <_puts_r+0xb6>
 8003580:	290a      	cmp	r1, #10
 8003582:	d004      	beq.n	800358e <_puts_r+0xb6>
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	1c5a      	adds	r2, r3, #1
 8003588:	6022      	str	r2, [r4, #0]
 800358a:	7019      	strb	r1, [r3, #0]
 800358c:	e7c5      	b.n	800351a <_puts_r+0x42>
 800358e:	4622      	mov	r2, r4
 8003590:	4628      	mov	r0, r5
 8003592:	f000 f817 	bl	80035c4 <__swbuf_r>
 8003596:	3001      	adds	r0, #1
 8003598:	d1bf      	bne.n	800351a <_puts_r+0x42>
 800359a:	e7df      	b.n	800355c <_puts_r+0x84>
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	250a      	movs	r5, #10
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	6022      	str	r2, [r4, #0]
 80035a4:	701d      	strb	r5, [r3, #0]
 80035a6:	e7db      	b.n	8003560 <_puts_r+0x88>
 80035a8:	08003f3c 	.word	0x08003f3c
 80035ac:	08003f5c 	.word	0x08003f5c
 80035b0:	08003f1c 	.word	0x08003f1c

080035b4 <puts>:
 80035b4:	4b02      	ldr	r3, [pc, #8]	; (80035c0 <puts+0xc>)
 80035b6:	4601      	mov	r1, r0
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	f7ff bf8d 	b.w	80034d8 <_puts_r>
 80035be:	bf00      	nop
 80035c0:	2000000c 	.word	0x2000000c

080035c4 <__swbuf_r>:
 80035c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c6:	460e      	mov	r6, r1
 80035c8:	4614      	mov	r4, r2
 80035ca:	4605      	mov	r5, r0
 80035cc:	b118      	cbz	r0, 80035d6 <__swbuf_r+0x12>
 80035ce:	6983      	ldr	r3, [r0, #24]
 80035d0:	b90b      	cbnz	r3, 80035d6 <__swbuf_r+0x12>
 80035d2:	f000 f9d1 	bl	8003978 <__sinit>
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <__swbuf_r+0x98>)
 80035d8:	429c      	cmp	r4, r3
 80035da:	d12b      	bne.n	8003634 <__swbuf_r+0x70>
 80035dc:	686c      	ldr	r4, [r5, #4]
 80035de:	69a3      	ldr	r3, [r4, #24]
 80035e0:	60a3      	str	r3, [r4, #8]
 80035e2:	89a3      	ldrh	r3, [r4, #12]
 80035e4:	071a      	lsls	r2, r3, #28
 80035e6:	d52f      	bpl.n	8003648 <__swbuf_r+0x84>
 80035e8:	6923      	ldr	r3, [r4, #16]
 80035ea:	b36b      	cbz	r3, 8003648 <__swbuf_r+0x84>
 80035ec:	6923      	ldr	r3, [r4, #16]
 80035ee:	6820      	ldr	r0, [r4, #0]
 80035f0:	1ac0      	subs	r0, r0, r3
 80035f2:	6963      	ldr	r3, [r4, #20]
 80035f4:	b2f6      	uxtb	r6, r6
 80035f6:	4283      	cmp	r3, r0
 80035f8:	4637      	mov	r7, r6
 80035fa:	dc04      	bgt.n	8003606 <__swbuf_r+0x42>
 80035fc:	4621      	mov	r1, r4
 80035fe:	4628      	mov	r0, r5
 8003600:	f000 f926 	bl	8003850 <_fflush_r>
 8003604:	bb30      	cbnz	r0, 8003654 <__swbuf_r+0x90>
 8003606:	68a3      	ldr	r3, [r4, #8]
 8003608:	3b01      	subs	r3, #1
 800360a:	60a3      	str	r3, [r4, #8]
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	6022      	str	r2, [r4, #0]
 8003612:	701e      	strb	r6, [r3, #0]
 8003614:	6963      	ldr	r3, [r4, #20]
 8003616:	3001      	adds	r0, #1
 8003618:	4283      	cmp	r3, r0
 800361a:	d004      	beq.n	8003626 <__swbuf_r+0x62>
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	07db      	lsls	r3, r3, #31
 8003620:	d506      	bpl.n	8003630 <__swbuf_r+0x6c>
 8003622:	2e0a      	cmp	r6, #10
 8003624:	d104      	bne.n	8003630 <__swbuf_r+0x6c>
 8003626:	4621      	mov	r1, r4
 8003628:	4628      	mov	r0, r5
 800362a:	f000 f911 	bl	8003850 <_fflush_r>
 800362e:	b988      	cbnz	r0, 8003654 <__swbuf_r+0x90>
 8003630:	4638      	mov	r0, r7
 8003632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <__swbuf_r+0x9c>)
 8003636:	429c      	cmp	r4, r3
 8003638:	d101      	bne.n	800363e <__swbuf_r+0x7a>
 800363a:	68ac      	ldr	r4, [r5, #8]
 800363c:	e7cf      	b.n	80035de <__swbuf_r+0x1a>
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <__swbuf_r+0xa0>)
 8003640:	429c      	cmp	r4, r3
 8003642:	bf08      	it	eq
 8003644:	68ec      	ldreq	r4, [r5, #12]
 8003646:	e7ca      	b.n	80035de <__swbuf_r+0x1a>
 8003648:	4621      	mov	r1, r4
 800364a:	4628      	mov	r0, r5
 800364c:	f000 f80c 	bl	8003668 <__swsetup_r>
 8003650:	2800      	cmp	r0, #0
 8003652:	d0cb      	beq.n	80035ec <__swbuf_r+0x28>
 8003654:	f04f 37ff 	mov.w	r7, #4294967295
 8003658:	e7ea      	b.n	8003630 <__swbuf_r+0x6c>
 800365a:	bf00      	nop
 800365c:	08003f3c 	.word	0x08003f3c
 8003660:	08003f5c 	.word	0x08003f5c
 8003664:	08003f1c 	.word	0x08003f1c

08003668 <__swsetup_r>:
 8003668:	4b32      	ldr	r3, [pc, #200]	; (8003734 <__swsetup_r+0xcc>)
 800366a:	b570      	push	{r4, r5, r6, lr}
 800366c:	681d      	ldr	r5, [r3, #0]
 800366e:	4606      	mov	r6, r0
 8003670:	460c      	mov	r4, r1
 8003672:	b125      	cbz	r5, 800367e <__swsetup_r+0x16>
 8003674:	69ab      	ldr	r3, [r5, #24]
 8003676:	b913      	cbnz	r3, 800367e <__swsetup_r+0x16>
 8003678:	4628      	mov	r0, r5
 800367a:	f000 f97d 	bl	8003978 <__sinit>
 800367e:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <__swsetup_r+0xd0>)
 8003680:	429c      	cmp	r4, r3
 8003682:	d10f      	bne.n	80036a4 <__swsetup_r+0x3c>
 8003684:	686c      	ldr	r4, [r5, #4]
 8003686:	89a3      	ldrh	r3, [r4, #12]
 8003688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800368c:	0719      	lsls	r1, r3, #28
 800368e:	d42c      	bmi.n	80036ea <__swsetup_r+0x82>
 8003690:	06dd      	lsls	r5, r3, #27
 8003692:	d411      	bmi.n	80036b8 <__swsetup_r+0x50>
 8003694:	2309      	movs	r3, #9
 8003696:	6033      	str	r3, [r6, #0]
 8003698:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800369c:	81a3      	strh	r3, [r4, #12]
 800369e:	f04f 30ff 	mov.w	r0, #4294967295
 80036a2:	e03e      	b.n	8003722 <__swsetup_r+0xba>
 80036a4:	4b25      	ldr	r3, [pc, #148]	; (800373c <__swsetup_r+0xd4>)
 80036a6:	429c      	cmp	r4, r3
 80036a8:	d101      	bne.n	80036ae <__swsetup_r+0x46>
 80036aa:	68ac      	ldr	r4, [r5, #8]
 80036ac:	e7eb      	b.n	8003686 <__swsetup_r+0x1e>
 80036ae:	4b24      	ldr	r3, [pc, #144]	; (8003740 <__swsetup_r+0xd8>)
 80036b0:	429c      	cmp	r4, r3
 80036b2:	bf08      	it	eq
 80036b4:	68ec      	ldreq	r4, [r5, #12]
 80036b6:	e7e6      	b.n	8003686 <__swsetup_r+0x1e>
 80036b8:	0758      	lsls	r0, r3, #29
 80036ba:	d512      	bpl.n	80036e2 <__swsetup_r+0x7a>
 80036bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036be:	b141      	cbz	r1, 80036d2 <__swsetup_r+0x6a>
 80036c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036c4:	4299      	cmp	r1, r3
 80036c6:	d002      	beq.n	80036ce <__swsetup_r+0x66>
 80036c8:	4630      	mov	r0, r6
 80036ca:	f000 fa5b 	bl	8003b84 <_free_r>
 80036ce:	2300      	movs	r3, #0
 80036d0:	6363      	str	r3, [r4, #52]	; 0x34
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036d8:	81a3      	strh	r3, [r4, #12]
 80036da:	2300      	movs	r3, #0
 80036dc:	6063      	str	r3, [r4, #4]
 80036de:	6923      	ldr	r3, [r4, #16]
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	89a3      	ldrh	r3, [r4, #12]
 80036e4:	f043 0308 	orr.w	r3, r3, #8
 80036e8:	81a3      	strh	r3, [r4, #12]
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	b94b      	cbnz	r3, 8003702 <__swsetup_r+0x9a>
 80036ee:	89a3      	ldrh	r3, [r4, #12]
 80036f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f8:	d003      	beq.n	8003702 <__swsetup_r+0x9a>
 80036fa:	4621      	mov	r1, r4
 80036fc:	4630      	mov	r0, r6
 80036fe:	f000 fa01 	bl	8003b04 <__smakebuf_r>
 8003702:	89a0      	ldrh	r0, [r4, #12]
 8003704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003708:	f010 0301 	ands.w	r3, r0, #1
 800370c:	d00a      	beq.n	8003724 <__swsetup_r+0xbc>
 800370e:	2300      	movs	r3, #0
 8003710:	60a3      	str	r3, [r4, #8]
 8003712:	6963      	ldr	r3, [r4, #20]
 8003714:	425b      	negs	r3, r3
 8003716:	61a3      	str	r3, [r4, #24]
 8003718:	6923      	ldr	r3, [r4, #16]
 800371a:	b943      	cbnz	r3, 800372e <__swsetup_r+0xc6>
 800371c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003720:	d1ba      	bne.n	8003698 <__swsetup_r+0x30>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	0781      	lsls	r1, r0, #30
 8003726:	bf58      	it	pl
 8003728:	6963      	ldrpl	r3, [r4, #20]
 800372a:	60a3      	str	r3, [r4, #8]
 800372c:	e7f4      	b.n	8003718 <__swsetup_r+0xb0>
 800372e:	2000      	movs	r0, #0
 8003730:	e7f7      	b.n	8003722 <__swsetup_r+0xba>
 8003732:	bf00      	nop
 8003734:	2000000c 	.word	0x2000000c
 8003738:	08003f3c 	.word	0x08003f3c
 800373c:	08003f5c 	.word	0x08003f5c
 8003740:	08003f1c 	.word	0x08003f1c

08003744 <__sflush_r>:
 8003744:	898a      	ldrh	r2, [r1, #12]
 8003746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800374a:	4605      	mov	r5, r0
 800374c:	0710      	lsls	r0, r2, #28
 800374e:	460c      	mov	r4, r1
 8003750:	d458      	bmi.n	8003804 <__sflush_r+0xc0>
 8003752:	684b      	ldr	r3, [r1, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	dc05      	bgt.n	8003764 <__sflush_r+0x20>
 8003758:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	dc02      	bgt.n	8003764 <__sflush_r+0x20>
 800375e:	2000      	movs	r0, #0
 8003760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003764:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003766:	2e00      	cmp	r6, #0
 8003768:	d0f9      	beq.n	800375e <__sflush_r+0x1a>
 800376a:	2300      	movs	r3, #0
 800376c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003770:	682f      	ldr	r7, [r5, #0]
 8003772:	602b      	str	r3, [r5, #0]
 8003774:	d032      	beq.n	80037dc <__sflush_r+0x98>
 8003776:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003778:	89a3      	ldrh	r3, [r4, #12]
 800377a:	075a      	lsls	r2, r3, #29
 800377c:	d505      	bpl.n	800378a <__sflush_r+0x46>
 800377e:	6863      	ldr	r3, [r4, #4]
 8003780:	1ac0      	subs	r0, r0, r3
 8003782:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003784:	b10b      	cbz	r3, 800378a <__sflush_r+0x46>
 8003786:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003788:	1ac0      	subs	r0, r0, r3
 800378a:	2300      	movs	r3, #0
 800378c:	4602      	mov	r2, r0
 800378e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003790:	6a21      	ldr	r1, [r4, #32]
 8003792:	4628      	mov	r0, r5
 8003794:	47b0      	blx	r6
 8003796:	1c43      	adds	r3, r0, #1
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	d106      	bne.n	80037aa <__sflush_r+0x66>
 800379c:	6829      	ldr	r1, [r5, #0]
 800379e:	291d      	cmp	r1, #29
 80037a0:	d82c      	bhi.n	80037fc <__sflush_r+0xb8>
 80037a2:	4a2a      	ldr	r2, [pc, #168]	; (800384c <__sflush_r+0x108>)
 80037a4:	40ca      	lsrs	r2, r1
 80037a6:	07d6      	lsls	r6, r2, #31
 80037a8:	d528      	bpl.n	80037fc <__sflush_r+0xb8>
 80037aa:	2200      	movs	r2, #0
 80037ac:	6062      	str	r2, [r4, #4]
 80037ae:	04d9      	lsls	r1, r3, #19
 80037b0:	6922      	ldr	r2, [r4, #16]
 80037b2:	6022      	str	r2, [r4, #0]
 80037b4:	d504      	bpl.n	80037c0 <__sflush_r+0x7c>
 80037b6:	1c42      	adds	r2, r0, #1
 80037b8:	d101      	bne.n	80037be <__sflush_r+0x7a>
 80037ba:	682b      	ldr	r3, [r5, #0]
 80037bc:	b903      	cbnz	r3, 80037c0 <__sflush_r+0x7c>
 80037be:	6560      	str	r0, [r4, #84]	; 0x54
 80037c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037c2:	602f      	str	r7, [r5, #0]
 80037c4:	2900      	cmp	r1, #0
 80037c6:	d0ca      	beq.n	800375e <__sflush_r+0x1a>
 80037c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037cc:	4299      	cmp	r1, r3
 80037ce:	d002      	beq.n	80037d6 <__sflush_r+0x92>
 80037d0:	4628      	mov	r0, r5
 80037d2:	f000 f9d7 	bl	8003b84 <_free_r>
 80037d6:	2000      	movs	r0, #0
 80037d8:	6360      	str	r0, [r4, #52]	; 0x34
 80037da:	e7c1      	b.n	8003760 <__sflush_r+0x1c>
 80037dc:	6a21      	ldr	r1, [r4, #32]
 80037de:	2301      	movs	r3, #1
 80037e0:	4628      	mov	r0, r5
 80037e2:	47b0      	blx	r6
 80037e4:	1c41      	adds	r1, r0, #1
 80037e6:	d1c7      	bne.n	8003778 <__sflush_r+0x34>
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0c4      	beq.n	8003778 <__sflush_r+0x34>
 80037ee:	2b1d      	cmp	r3, #29
 80037f0:	d001      	beq.n	80037f6 <__sflush_r+0xb2>
 80037f2:	2b16      	cmp	r3, #22
 80037f4:	d101      	bne.n	80037fa <__sflush_r+0xb6>
 80037f6:	602f      	str	r7, [r5, #0]
 80037f8:	e7b1      	b.n	800375e <__sflush_r+0x1a>
 80037fa:	89a3      	ldrh	r3, [r4, #12]
 80037fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003800:	81a3      	strh	r3, [r4, #12]
 8003802:	e7ad      	b.n	8003760 <__sflush_r+0x1c>
 8003804:	690f      	ldr	r7, [r1, #16]
 8003806:	2f00      	cmp	r7, #0
 8003808:	d0a9      	beq.n	800375e <__sflush_r+0x1a>
 800380a:	0793      	lsls	r3, r2, #30
 800380c:	680e      	ldr	r6, [r1, #0]
 800380e:	bf08      	it	eq
 8003810:	694b      	ldreq	r3, [r1, #20]
 8003812:	600f      	str	r7, [r1, #0]
 8003814:	bf18      	it	ne
 8003816:	2300      	movne	r3, #0
 8003818:	eba6 0807 	sub.w	r8, r6, r7
 800381c:	608b      	str	r3, [r1, #8]
 800381e:	f1b8 0f00 	cmp.w	r8, #0
 8003822:	dd9c      	ble.n	800375e <__sflush_r+0x1a>
 8003824:	6a21      	ldr	r1, [r4, #32]
 8003826:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003828:	4643      	mov	r3, r8
 800382a:	463a      	mov	r2, r7
 800382c:	4628      	mov	r0, r5
 800382e:	47b0      	blx	r6
 8003830:	2800      	cmp	r0, #0
 8003832:	dc06      	bgt.n	8003842 <__sflush_r+0xfe>
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800383a:	81a3      	strh	r3, [r4, #12]
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	e78e      	b.n	8003760 <__sflush_r+0x1c>
 8003842:	4407      	add	r7, r0
 8003844:	eba8 0800 	sub.w	r8, r8, r0
 8003848:	e7e9      	b.n	800381e <__sflush_r+0xda>
 800384a:	bf00      	nop
 800384c:	20400001 	.word	0x20400001

08003850 <_fflush_r>:
 8003850:	b538      	push	{r3, r4, r5, lr}
 8003852:	690b      	ldr	r3, [r1, #16]
 8003854:	4605      	mov	r5, r0
 8003856:	460c      	mov	r4, r1
 8003858:	b913      	cbnz	r3, 8003860 <_fflush_r+0x10>
 800385a:	2500      	movs	r5, #0
 800385c:	4628      	mov	r0, r5
 800385e:	bd38      	pop	{r3, r4, r5, pc}
 8003860:	b118      	cbz	r0, 800386a <_fflush_r+0x1a>
 8003862:	6983      	ldr	r3, [r0, #24]
 8003864:	b90b      	cbnz	r3, 800386a <_fflush_r+0x1a>
 8003866:	f000 f887 	bl	8003978 <__sinit>
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <_fflush_r+0x6c>)
 800386c:	429c      	cmp	r4, r3
 800386e:	d11b      	bne.n	80038a8 <_fflush_r+0x58>
 8003870:	686c      	ldr	r4, [r5, #4]
 8003872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0ef      	beq.n	800385a <_fflush_r+0xa>
 800387a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800387c:	07d0      	lsls	r0, r2, #31
 800387e:	d404      	bmi.n	800388a <_fflush_r+0x3a>
 8003880:	0599      	lsls	r1, r3, #22
 8003882:	d402      	bmi.n	800388a <_fflush_r+0x3a>
 8003884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003886:	f000 f915 	bl	8003ab4 <__retarget_lock_acquire_recursive>
 800388a:	4628      	mov	r0, r5
 800388c:	4621      	mov	r1, r4
 800388e:	f7ff ff59 	bl	8003744 <__sflush_r>
 8003892:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003894:	07da      	lsls	r2, r3, #31
 8003896:	4605      	mov	r5, r0
 8003898:	d4e0      	bmi.n	800385c <_fflush_r+0xc>
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	059b      	lsls	r3, r3, #22
 800389e:	d4dd      	bmi.n	800385c <_fflush_r+0xc>
 80038a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038a2:	f000 f908 	bl	8003ab6 <__retarget_lock_release_recursive>
 80038a6:	e7d9      	b.n	800385c <_fflush_r+0xc>
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <_fflush_r+0x70>)
 80038aa:	429c      	cmp	r4, r3
 80038ac:	d101      	bne.n	80038b2 <_fflush_r+0x62>
 80038ae:	68ac      	ldr	r4, [r5, #8]
 80038b0:	e7df      	b.n	8003872 <_fflush_r+0x22>
 80038b2:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <_fflush_r+0x74>)
 80038b4:	429c      	cmp	r4, r3
 80038b6:	bf08      	it	eq
 80038b8:	68ec      	ldreq	r4, [r5, #12]
 80038ba:	e7da      	b.n	8003872 <_fflush_r+0x22>
 80038bc:	08003f3c 	.word	0x08003f3c
 80038c0:	08003f5c 	.word	0x08003f5c
 80038c4:	08003f1c 	.word	0x08003f1c

080038c8 <std>:
 80038c8:	2300      	movs	r3, #0
 80038ca:	b510      	push	{r4, lr}
 80038cc:	4604      	mov	r4, r0
 80038ce:	e9c0 3300 	strd	r3, r3, [r0]
 80038d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038d6:	6083      	str	r3, [r0, #8]
 80038d8:	8181      	strh	r1, [r0, #12]
 80038da:	6643      	str	r3, [r0, #100]	; 0x64
 80038dc:	81c2      	strh	r2, [r0, #14]
 80038de:	6183      	str	r3, [r0, #24]
 80038e0:	4619      	mov	r1, r3
 80038e2:	2208      	movs	r2, #8
 80038e4:	305c      	adds	r0, #92	; 0x5c
 80038e6:	f7ff fdef 	bl	80034c8 <memset>
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <std+0x38>)
 80038ec:	6263      	str	r3, [r4, #36]	; 0x24
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <std+0x3c>)
 80038f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <std+0x40>)
 80038f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <std+0x44>)
 80038f8:	6224      	str	r4, [r4, #32]
 80038fa:	6323      	str	r3, [r4, #48]	; 0x30
 80038fc:	bd10      	pop	{r4, pc}
 80038fe:	bf00      	nop
 8003900:	08003d65 	.word	0x08003d65
 8003904:	08003d87 	.word	0x08003d87
 8003908:	08003dbf 	.word	0x08003dbf
 800390c:	08003de3 	.word	0x08003de3

08003910 <_cleanup_r>:
 8003910:	4901      	ldr	r1, [pc, #4]	; (8003918 <_cleanup_r+0x8>)
 8003912:	f000 b8af 	b.w	8003a74 <_fwalk_reent>
 8003916:	bf00      	nop
 8003918:	08003851 	.word	0x08003851

0800391c <__sfmoreglue>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	2268      	movs	r2, #104	; 0x68
 8003920:	1e4d      	subs	r5, r1, #1
 8003922:	4355      	muls	r5, r2
 8003924:	460e      	mov	r6, r1
 8003926:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800392a:	f000 f997 	bl	8003c5c <_malloc_r>
 800392e:	4604      	mov	r4, r0
 8003930:	b140      	cbz	r0, 8003944 <__sfmoreglue+0x28>
 8003932:	2100      	movs	r1, #0
 8003934:	e9c0 1600 	strd	r1, r6, [r0]
 8003938:	300c      	adds	r0, #12
 800393a:	60a0      	str	r0, [r4, #8]
 800393c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003940:	f7ff fdc2 	bl	80034c8 <memset>
 8003944:	4620      	mov	r0, r4
 8003946:	bd70      	pop	{r4, r5, r6, pc}

08003948 <__sfp_lock_acquire>:
 8003948:	4801      	ldr	r0, [pc, #4]	; (8003950 <__sfp_lock_acquire+0x8>)
 800394a:	f000 b8b3 	b.w	8003ab4 <__retarget_lock_acquire_recursive>
 800394e:	bf00      	nop
 8003950:	20008169 	.word	0x20008169

08003954 <__sfp_lock_release>:
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <__sfp_lock_release+0x8>)
 8003956:	f000 b8ae 	b.w	8003ab6 <__retarget_lock_release_recursive>
 800395a:	bf00      	nop
 800395c:	20008169 	.word	0x20008169

08003960 <__sinit_lock_acquire>:
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <__sinit_lock_acquire+0x8>)
 8003962:	f000 b8a7 	b.w	8003ab4 <__retarget_lock_acquire_recursive>
 8003966:	bf00      	nop
 8003968:	2000816a 	.word	0x2000816a

0800396c <__sinit_lock_release>:
 800396c:	4801      	ldr	r0, [pc, #4]	; (8003974 <__sinit_lock_release+0x8>)
 800396e:	f000 b8a2 	b.w	8003ab6 <__retarget_lock_release_recursive>
 8003972:	bf00      	nop
 8003974:	2000816a 	.word	0x2000816a

08003978 <__sinit>:
 8003978:	b510      	push	{r4, lr}
 800397a:	4604      	mov	r4, r0
 800397c:	f7ff fff0 	bl	8003960 <__sinit_lock_acquire>
 8003980:	69a3      	ldr	r3, [r4, #24]
 8003982:	b11b      	cbz	r3, 800398c <__sinit+0x14>
 8003984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003988:	f7ff bff0 	b.w	800396c <__sinit_lock_release>
 800398c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003990:	6523      	str	r3, [r4, #80]	; 0x50
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <__sinit+0x68>)
 8003994:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <__sinit+0x6c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	62a2      	str	r2, [r4, #40]	; 0x28
 800399a:	42a3      	cmp	r3, r4
 800399c:	bf04      	itt	eq
 800399e:	2301      	moveq	r3, #1
 80039a0:	61a3      	streq	r3, [r4, #24]
 80039a2:	4620      	mov	r0, r4
 80039a4:	f000 f820 	bl	80039e8 <__sfp>
 80039a8:	6060      	str	r0, [r4, #4]
 80039aa:	4620      	mov	r0, r4
 80039ac:	f000 f81c 	bl	80039e8 <__sfp>
 80039b0:	60a0      	str	r0, [r4, #8]
 80039b2:	4620      	mov	r0, r4
 80039b4:	f000 f818 	bl	80039e8 <__sfp>
 80039b8:	2200      	movs	r2, #0
 80039ba:	60e0      	str	r0, [r4, #12]
 80039bc:	2104      	movs	r1, #4
 80039be:	6860      	ldr	r0, [r4, #4]
 80039c0:	f7ff ff82 	bl	80038c8 <std>
 80039c4:	68a0      	ldr	r0, [r4, #8]
 80039c6:	2201      	movs	r2, #1
 80039c8:	2109      	movs	r1, #9
 80039ca:	f7ff ff7d 	bl	80038c8 <std>
 80039ce:	68e0      	ldr	r0, [r4, #12]
 80039d0:	2202      	movs	r2, #2
 80039d2:	2112      	movs	r1, #18
 80039d4:	f7ff ff78 	bl	80038c8 <std>
 80039d8:	2301      	movs	r3, #1
 80039da:	61a3      	str	r3, [r4, #24]
 80039dc:	e7d2      	b.n	8003984 <__sinit+0xc>
 80039de:	bf00      	nop
 80039e0:	08003f18 	.word	0x08003f18
 80039e4:	08003911 	.word	0x08003911

080039e8 <__sfp>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	4607      	mov	r7, r0
 80039ec:	f7ff ffac 	bl	8003948 <__sfp_lock_acquire>
 80039f0:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <__sfp+0x84>)
 80039f2:	681e      	ldr	r6, [r3, #0]
 80039f4:	69b3      	ldr	r3, [r6, #24]
 80039f6:	b913      	cbnz	r3, 80039fe <__sfp+0x16>
 80039f8:	4630      	mov	r0, r6
 80039fa:	f7ff ffbd 	bl	8003978 <__sinit>
 80039fe:	3648      	adds	r6, #72	; 0x48
 8003a00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	d503      	bpl.n	8003a10 <__sfp+0x28>
 8003a08:	6833      	ldr	r3, [r6, #0]
 8003a0a:	b30b      	cbz	r3, 8003a50 <__sfp+0x68>
 8003a0c:	6836      	ldr	r6, [r6, #0]
 8003a0e:	e7f7      	b.n	8003a00 <__sfp+0x18>
 8003a10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a14:	b9d5      	cbnz	r5, 8003a4c <__sfp+0x64>
 8003a16:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <__sfp+0x88>)
 8003a18:	60e3      	str	r3, [r4, #12]
 8003a1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a1e:	6665      	str	r5, [r4, #100]	; 0x64
 8003a20:	f000 f847 	bl	8003ab2 <__retarget_lock_init_recursive>
 8003a24:	f7ff ff96 	bl	8003954 <__sfp_lock_release>
 8003a28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a30:	6025      	str	r5, [r4, #0]
 8003a32:	61a5      	str	r5, [r4, #24]
 8003a34:	2208      	movs	r2, #8
 8003a36:	4629      	mov	r1, r5
 8003a38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a3c:	f7ff fd44 	bl	80034c8 <memset>
 8003a40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a48:	4620      	mov	r0, r4
 8003a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a4c:	3468      	adds	r4, #104	; 0x68
 8003a4e:	e7d9      	b.n	8003a04 <__sfp+0x1c>
 8003a50:	2104      	movs	r1, #4
 8003a52:	4638      	mov	r0, r7
 8003a54:	f7ff ff62 	bl	800391c <__sfmoreglue>
 8003a58:	4604      	mov	r4, r0
 8003a5a:	6030      	str	r0, [r6, #0]
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	d1d5      	bne.n	8003a0c <__sfp+0x24>
 8003a60:	f7ff ff78 	bl	8003954 <__sfp_lock_release>
 8003a64:	230c      	movs	r3, #12
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	e7ee      	b.n	8003a48 <__sfp+0x60>
 8003a6a:	bf00      	nop
 8003a6c:	08003f18 	.word	0x08003f18
 8003a70:	ffff0001 	.word	0xffff0001

08003a74 <_fwalk_reent>:
 8003a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a78:	4606      	mov	r6, r0
 8003a7a:	4688      	mov	r8, r1
 8003a7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a80:	2700      	movs	r7, #0
 8003a82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a86:	f1b9 0901 	subs.w	r9, r9, #1
 8003a8a:	d505      	bpl.n	8003a98 <_fwalk_reent+0x24>
 8003a8c:	6824      	ldr	r4, [r4, #0]
 8003a8e:	2c00      	cmp	r4, #0
 8003a90:	d1f7      	bne.n	8003a82 <_fwalk_reent+0xe>
 8003a92:	4638      	mov	r0, r7
 8003a94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a98:	89ab      	ldrh	r3, [r5, #12]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d907      	bls.n	8003aae <_fwalk_reent+0x3a>
 8003a9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	d003      	beq.n	8003aae <_fwalk_reent+0x3a>
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	47c0      	blx	r8
 8003aac:	4307      	orrs	r7, r0
 8003aae:	3568      	adds	r5, #104	; 0x68
 8003ab0:	e7e9      	b.n	8003a86 <_fwalk_reent+0x12>

08003ab2 <__retarget_lock_init_recursive>:
 8003ab2:	4770      	bx	lr

08003ab4 <__retarget_lock_acquire_recursive>:
 8003ab4:	4770      	bx	lr

08003ab6 <__retarget_lock_release_recursive>:
 8003ab6:	4770      	bx	lr

08003ab8 <__swhatbuf_r>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	460e      	mov	r6, r1
 8003abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac0:	2900      	cmp	r1, #0
 8003ac2:	b096      	sub	sp, #88	; 0x58
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	461d      	mov	r5, r3
 8003ac8:	da08      	bge.n	8003adc <__swhatbuf_r+0x24>
 8003aca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	602a      	str	r2, [r5, #0]
 8003ad2:	061a      	lsls	r2, r3, #24
 8003ad4:	d410      	bmi.n	8003af8 <__swhatbuf_r+0x40>
 8003ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ada:	e00e      	b.n	8003afa <__swhatbuf_r+0x42>
 8003adc:	466a      	mov	r2, sp
 8003ade:	f000 f9a7 	bl	8003e30 <_fstat_r>
 8003ae2:	2800      	cmp	r0, #0
 8003ae4:	dbf1      	blt.n	8003aca <__swhatbuf_r+0x12>
 8003ae6:	9a01      	ldr	r2, [sp, #4]
 8003ae8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003aec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003af0:	425a      	negs	r2, r3
 8003af2:	415a      	adcs	r2, r3
 8003af4:	602a      	str	r2, [r5, #0]
 8003af6:	e7ee      	b.n	8003ad6 <__swhatbuf_r+0x1e>
 8003af8:	2340      	movs	r3, #64	; 0x40
 8003afa:	2000      	movs	r0, #0
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	b016      	add	sp, #88	; 0x58
 8003b00:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b04 <__smakebuf_r>:
 8003b04:	898b      	ldrh	r3, [r1, #12]
 8003b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b08:	079d      	lsls	r5, r3, #30
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	d507      	bpl.n	8003b20 <__smakebuf_r+0x1c>
 8003b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	6123      	str	r3, [r4, #16]
 8003b18:	2301      	movs	r3, #1
 8003b1a:	6163      	str	r3, [r4, #20]
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	ab01      	add	r3, sp, #4
 8003b22:	466a      	mov	r2, sp
 8003b24:	f7ff ffc8 	bl	8003ab8 <__swhatbuf_r>
 8003b28:	9900      	ldr	r1, [sp, #0]
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f000 f895 	bl	8003c5c <_malloc_r>
 8003b32:	b948      	cbnz	r0, 8003b48 <__smakebuf_r+0x44>
 8003b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b38:	059a      	lsls	r2, r3, #22
 8003b3a:	d4ef      	bmi.n	8003b1c <__smakebuf_r+0x18>
 8003b3c:	f023 0303 	bic.w	r3, r3, #3
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	81a3      	strh	r3, [r4, #12]
 8003b46:	e7e3      	b.n	8003b10 <__smakebuf_r+0xc>
 8003b48:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <__smakebuf_r+0x7c>)
 8003b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b4c:	89a3      	ldrh	r3, [r4, #12]
 8003b4e:	6020      	str	r0, [r4, #0]
 8003b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b54:	81a3      	strh	r3, [r4, #12]
 8003b56:	9b00      	ldr	r3, [sp, #0]
 8003b58:	6163      	str	r3, [r4, #20]
 8003b5a:	9b01      	ldr	r3, [sp, #4]
 8003b5c:	6120      	str	r0, [r4, #16]
 8003b5e:	b15b      	cbz	r3, 8003b78 <__smakebuf_r+0x74>
 8003b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b64:	4630      	mov	r0, r6
 8003b66:	f000 f975 	bl	8003e54 <_isatty_r>
 8003b6a:	b128      	cbz	r0, 8003b78 <__smakebuf_r+0x74>
 8003b6c:	89a3      	ldrh	r3, [r4, #12]
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	81a3      	strh	r3, [r4, #12]
 8003b78:	89a0      	ldrh	r0, [r4, #12]
 8003b7a:	4305      	orrs	r5, r0
 8003b7c:	81a5      	strh	r5, [r4, #12]
 8003b7e:	e7cd      	b.n	8003b1c <__smakebuf_r+0x18>
 8003b80:	08003911 	.word	0x08003911

08003b84 <_free_r>:
 8003b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b86:	2900      	cmp	r1, #0
 8003b88:	d044      	beq.n	8003c14 <_free_r+0x90>
 8003b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b8e:	9001      	str	r0, [sp, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f1a1 0404 	sub.w	r4, r1, #4
 8003b96:	bfb8      	it	lt
 8003b98:	18e4      	addlt	r4, r4, r3
 8003b9a:	f000 f97d 	bl	8003e98 <__malloc_lock>
 8003b9e:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <_free_r+0x94>)
 8003ba0:	9801      	ldr	r0, [sp, #4]
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	b933      	cbnz	r3, 8003bb4 <_free_r+0x30>
 8003ba6:	6063      	str	r3, [r4, #4]
 8003ba8:	6014      	str	r4, [r2, #0]
 8003baa:	b003      	add	sp, #12
 8003bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bb0:	f000 b978 	b.w	8003ea4 <__malloc_unlock>
 8003bb4:	42a3      	cmp	r3, r4
 8003bb6:	d908      	bls.n	8003bca <_free_r+0x46>
 8003bb8:	6825      	ldr	r5, [r4, #0]
 8003bba:	1961      	adds	r1, r4, r5
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	bf01      	itttt	eq
 8003bc0:	6819      	ldreq	r1, [r3, #0]
 8003bc2:	685b      	ldreq	r3, [r3, #4]
 8003bc4:	1949      	addeq	r1, r1, r5
 8003bc6:	6021      	streq	r1, [r4, #0]
 8003bc8:	e7ed      	b.n	8003ba6 <_free_r+0x22>
 8003bca:	461a      	mov	r2, r3
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	b10b      	cbz	r3, 8003bd4 <_free_r+0x50>
 8003bd0:	42a3      	cmp	r3, r4
 8003bd2:	d9fa      	bls.n	8003bca <_free_r+0x46>
 8003bd4:	6811      	ldr	r1, [r2, #0]
 8003bd6:	1855      	adds	r5, r2, r1
 8003bd8:	42a5      	cmp	r5, r4
 8003bda:	d10b      	bne.n	8003bf4 <_free_r+0x70>
 8003bdc:	6824      	ldr	r4, [r4, #0]
 8003bde:	4421      	add	r1, r4
 8003be0:	1854      	adds	r4, r2, r1
 8003be2:	42a3      	cmp	r3, r4
 8003be4:	6011      	str	r1, [r2, #0]
 8003be6:	d1e0      	bne.n	8003baa <_free_r+0x26>
 8003be8:	681c      	ldr	r4, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	6053      	str	r3, [r2, #4]
 8003bee:	4421      	add	r1, r4
 8003bf0:	6011      	str	r1, [r2, #0]
 8003bf2:	e7da      	b.n	8003baa <_free_r+0x26>
 8003bf4:	d902      	bls.n	8003bfc <_free_r+0x78>
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	6003      	str	r3, [r0, #0]
 8003bfa:	e7d6      	b.n	8003baa <_free_r+0x26>
 8003bfc:	6825      	ldr	r5, [r4, #0]
 8003bfe:	1961      	adds	r1, r4, r5
 8003c00:	428b      	cmp	r3, r1
 8003c02:	bf04      	itt	eq
 8003c04:	6819      	ldreq	r1, [r3, #0]
 8003c06:	685b      	ldreq	r3, [r3, #4]
 8003c08:	6063      	str	r3, [r4, #4]
 8003c0a:	bf04      	itt	eq
 8003c0c:	1949      	addeq	r1, r1, r5
 8003c0e:	6021      	streq	r1, [r4, #0]
 8003c10:	6054      	str	r4, [r2, #4]
 8003c12:	e7ca      	b.n	8003baa <_free_r+0x26>
 8003c14:	b003      	add	sp, #12
 8003c16:	bd30      	pop	{r4, r5, pc}
 8003c18:	2000816c 	.word	0x2000816c

08003c1c <sbrk_aligned>:
 8003c1c:	b570      	push	{r4, r5, r6, lr}
 8003c1e:	4e0e      	ldr	r6, [pc, #56]	; (8003c58 <sbrk_aligned+0x3c>)
 8003c20:	460c      	mov	r4, r1
 8003c22:	6831      	ldr	r1, [r6, #0]
 8003c24:	4605      	mov	r5, r0
 8003c26:	b911      	cbnz	r1, 8003c2e <sbrk_aligned+0x12>
 8003c28:	f000 f88c 	bl	8003d44 <_sbrk_r>
 8003c2c:	6030      	str	r0, [r6, #0]
 8003c2e:	4621      	mov	r1, r4
 8003c30:	4628      	mov	r0, r5
 8003c32:	f000 f887 	bl	8003d44 <_sbrk_r>
 8003c36:	1c43      	adds	r3, r0, #1
 8003c38:	d00a      	beq.n	8003c50 <sbrk_aligned+0x34>
 8003c3a:	1cc4      	adds	r4, r0, #3
 8003c3c:	f024 0403 	bic.w	r4, r4, #3
 8003c40:	42a0      	cmp	r0, r4
 8003c42:	d007      	beq.n	8003c54 <sbrk_aligned+0x38>
 8003c44:	1a21      	subs	r1, r4, r0
 8003c46:	4628      	mov	r0, r5
 8003c48:	f000 f87c 	bl	8003d44 <_sbrk_r>
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d101      	bne.n	8003c54 <sbrk_aligned+0x38>
 8003c50:	f04f 34ff 	mov.w	r4, #4294967295
 8003c54:	4620      	mov	r0, r4
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	20008170 	.word	0x20008170

08003c5c <_malloc_r>:
 8003c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c60:	1ccd      	adds	r5, r1, #3
 8003c62:	f025 0503 	bic.w	r5, r5, #3
 8003c66:	3508      	adds	r5, #8
 8003c68:	2d0c      	cmp	r5, #12
 8003c6a:	bf38      	it	cc
 8003c6c:	250c      	movcc	r5, #12
 8003c6e:	2d00      	cmp	r5, #0
 8003c70:	4607      	mov	r7, r0
 8003c72:	db01      	blt.n	8003c78 <_malloc_r+0x1c>
 8003c74:	42a9      	cmp	r1, r5
 8003c76:	d905      	bls.n	8003c84 <_malloc_r+0x28>
 8003c78:	230c      	movs	r3, #12
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	2600      	movs	r6, #0
 8003c7e:	4630      	mov	r0, r6
 8003c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c84:	4e2e      	ldr	r6, [pc, #184]	; (8003d40 <_malloc_r+0xe4>)
 8003c86:	f000 f907 	bl	8003e98 <__malloc_lock>
 8003c8a:	6833      	ldr	r3, [r6, #0]
 8003c8c:	461c      	mov	r4, r3
 8003c8e:	bb34      	cbnz	r4, 8003cde <_malloc_r+0x82>
 8003c90:	4629      	mov	r1, r5
 8003c92:	4638      	mov	r0, r7
 8003c94:	f7ff ffc2 	bl	8003c1c <sbrk_aligned>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	d14d      	bne.n	8003d3a <_malloc_r+0xde>
 8003c9e:	6834      	ldr	r4, [r6, #0]
 8003ca0:	4626      	mov	r6, r4
 8003ca2:	2e00      	cmp	r6, #0
 8003ca4:	d140      	bne.n	8003d28 <_malloc_r+0xcc>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	4631      	mov	r1, r6
 8003caa:	4638      	mov	r0, r7
 8003cac:	eb04 0803 	add.w	r8, r4, r3
 8003cb0:	f000 f848 	bl	8003d44 <_sbrk_r>
 8003cb4:	4580      	cmp	r8, r0
 8003cb6:	d13a      	bne.n	8003d2e <_malloc_r+0xd2>
 8003cb8:	6821      	ldr	r1, [r4, #0]
 8003cba:	3503      	adds	r5, #3
 8003cbc:	1a6d      	subs	r5, r5, r1
 8003cbe:	f025 0503 	bic.w	r5, r5, #3
 8003cc2:	3508      	adds	r5, #8
 8003cc4:	2d0c      	cmp	r5, #12
 8003cc6:	bf38      	it	cc
 8003cc8:	250c      	movcc	r5, #12
 8003cca:	4629      	mov	r1, r5
 8003ccc:	4638      	mov	r0, r7
 8003cce:	f7ff ffa5 	bl	8003c1c <sbrk_aligned>
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	d02b      	beq.n	8003d2e <_malloc_r+0xd2>
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	442b      	add	r3, r5
 8003cda:	6023      	str	r3, [r4, #0]
 8003cdc:	e00e      	b.n	8003cfc <_malloc_r+0xa0>
 8003cde:	6822      	ldr	r2, [r4, #0]
 8003ce0:	1b52      	subs	r2, r2, r5
 8003ce2:	d41e      	bmi.n	8003d22 <_malloc_r+0xc6>
 8003ce4:	2a0b      	cmp	r2, #11
 8003ce6:	d916      	bls.n	8003d16 <_malloc_r+0xba>
 8003ce8:	1961      	adds	r1, r4, r5
 8003cea:	42a3      	cmp	r3, r4
 8003cec:	6025      	str	r5, [r4, #0]
 8003cee:	bf18      	it	ne
 8003cf0:	6059      	strne	r1, [r3, #4]
 8003cf2:	6863      	ldr	r3, [r4, #4]
 8003cf4:	bf08      	it	eq
 8003cf6:	6031      	streq	r1, [r6, #0]
 8003cf8:	5162      	str	r2, [r4, r5]
 8003cfa:	604b      	str	r3, [r1, #4]
 8003cfc:	4638      	mov	r0, r7
 8003cfe:	f104 060b 	add.w	r6, r4, #11
 8003d02:	f000 f8cf 	bl	8003ea4 <__malloc_unlock>
 8003d06:	f026 0607 	bic.w	r6, r6, #7
 8003d0a:	1d23      	adds	r3, r4, #4
 8003d0c:	1af2      	subs	r2, r6, r3
 8003d0e:	d0b6      	beq.n	8003c7e <_malloc_r+0x22>
 8003d10:	1b9b      	subs	r3, r3, r6
 8003d12:	50a3      	str	r3, [r4, r2]
 8003d14:	e7b3      	b.n	8003c7e <_malloc_r+0x22>
 8003d16:	6862      	ldr	r2, [r4, #4]
 8003d18:	42a3      	cmp	r3, r4
 8003d1a:	bf0c      	ite	eq
 8003d1c:	6032      	streq	r2, [r6, #0]
 8003d1e:	605a      	strne	r2, [r3, #4]
 8003d20:	e7ec      	b.n	8003cfc <_malloc_r+0xa0>
 8003d22:	4623      	mov	r3, r4
 8003d24:	6864      	ldr	r4, [r4, #4]
 8003d26:	e7b2      	b.n	8003c8e <_malloc_r+0x32>
 8003d28:	4634      	mov	r4, r6
 8003d2a:	6876      	ldr	r6, [r6, #4]
 8003d2c:	e7b9      	b.n	8003ca2 <_malloc_r+0x46>
 8003d2e:	230c      	movs	r3, #12
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4638      	mov	r0, r7
 8003d34:	f000 f8b6 	bl	8003ea4 <__malloc_unlock>
 8003d38:	e7a1      	b.n	8003c7e <_malloc_r+0x22>
 8003d3a:	6025      	str	r5, [r4, #0]
 8003d3c:	e7de      	b.n	8003cfc <_malloc_r+0xa0>
 8003d3e:	bf00      	nop
 8003d40:	2000816c 	.word	0x2000816c

08003d44 <_sbrk_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	4d06      	ldr	r5, [pc, #24]	; (8003d60 <_sbrk_r+0x1c>)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	602b      	str	r3, [r5, #0]
 8003d50:	f7fd fcf2 	bl	8001738 <_sbrk>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d102      	bne.n	8003d5e <_sbrk_r+0x1a>
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	b103      	cbz	r3, 8003d5e <_sbrk_r+0x1a>
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	bd38      	pop	{r3, r4, r5, pc}
 8003d60:	20008174 	.word	0x20008174

08003d64 <__sread>:
 8003d64:	b510      	push	{r4, lr}
 8003d66:	460c      	mov	r4, r1
 8003d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6c:	f000 f8a0 	bl	8003eb0 <_read_r>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	bfab      	itete	ge
 8003d74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d76:	89a3      	ldrhlt	r3, [r4, #12]
 8003d78:	181b      	addge	r3, r3, r0
 8003d7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d7e:	bfac      	ite	ge
 8003d80:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d82:	81a3      	strhlt	r3, [r4, #12]
 8003d84:	bd10      	pop	{r4, pc}

08003d86 <__swrite>:
 8003d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d8a:	461f      	mov	r7, r3
 8003d8c:	898b      	ldrh	r3, [r1, #12]
 8003d8e:	05db      	lsls	r3, r3, #23
 8003d90:	4605      	mov	r5, r0
 8003d92:	460c      	mov	r4, r1
 8003d94:	4616      	mov	r6, r2
 8003d96:	d505      	bpl.n	8003da4 <__swrite+0x1e>
 8003d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f000 f868 	bl	8003e74 <_lseek_r>
 8003da4:	89a3      	ldrh	r3, [r4, #12]
 8003da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dae:	81a3      	strh	r3, [r4, #12]
 8003db0:	4632      	mov	r2, r6
 8003db2:	463b      	mov	r3, r7
 8003db4:	4628      	mov	r0, r5
 8003db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dba:	f000 b817 	b.w	8003dec <_write_r>

08003dbe <__sseek>:
 8003dbe:	b510      	push	{r4, lr}
 8003dc0:	460c      	mov	r4, r1
 8003dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dc6:	f000 f855 	bl	8003e74 <_lseek_r>
 8003dca:	1c43      	adds	r3, r0, #1
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	bf15      	itete	ne
 8003dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003dda:	81a3      	strheq	r3, [r4, #12]
 8003ddc:	bf18      	it	ne
 8003dde:	81a3      	strhne	r3, [r4, #12]
 8003de0:	bd10      	pop	{r4, pc}

08003de2 <__sclose>:
 8003de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de6:	f000 b813 	b.w	8003e10 <_close_r>
	...

08003dec <_write_r>:
 8003dec:	b538      	push	{r3, r4, r5, lr}
 8003dee:	4d07      	ldr	r5, [pc, #28]	; (8003e0c <_write_r+0x20>)
 8003df0:	4604      	mov	r4, r0
 8003df2:	4608      	mov	r0, r1
 8003df4:	4611      	mov	r1, r2
 8003df6:	2200      	movs	r2, #0
 8003df8:	602a      	str	r2, [r5, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f7fc fbf0 	bl	80005e0 <_write>
 8003e00:	1c43      	adds	r3, r0, #1
 8003e02:	d102      	bne.n	8003e0a <_write_r+0x1e>
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	b103      	cbz	r3, 8003e0a <_write_r+0x1e>
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	bd38      	pop	{r3, r4, r5, pc}
 8003e0c:	20008174 	.word	0x20008174

08003e10 <_close_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	4d06      	ldr	r5, [pc, #24]	; (8003e2c <_close_r+0x1c>)
 8003e14:	2300      	movs	r3, #0
 8003e16:	4604      	mov	r4, r0
 8003e18:	4608      	mov	r0, r1
 8003e1a:	602b      	str	r3, [r5, #0]
 8003e1c:	f7fd fc57 	bl	80016ce <_close>
 8003e20:	1c43      	adds	r3, r0, #1
 8003e22:	d102      	bne.n	8003e2a <_close_r+0x1a>
 8003e24:	682b      	ldr	r3, [r5, #0]
 8003e26:	b103      	cbz	r3, 8003e2a <_close_r+0x1a>
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	bd38      	pop	{r3, r4, r5, pc}
 8003e2c:	20008174 	.word	0x20008174

08003e30 <_fstat_r>:
 8003e30:	b538      	push	{r3, r4, r5, lr}
 8003e32:	4d07      	ldr	r5, [pc, #28]	; (8003e50 <_fstat_r+0x20>)
 8003e34:	2300      	movs	r3, #0
 8003e36:	4604      	mov	r4, r0
 8003e38:	4608      	mov	r0, r1
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	602b      	str	r3, [r5, #0]
 8003e3e:	f7fd fc52 	bl	80016e6 <_fstat>
 8003e42:	1c43      	adds	r3, r0, #1
 8003e44:	d102      	bne.n	8003e4c <_fstat_r+0x1c>
 8003e46:	682b      	ldr	r3, [r5, #0]
 8003e48:	b103      	cbz	r3, 8003e4c <_fstat_r+0x1c>
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	bd38      	pop	{r3, r4, r5, pc}
 8003e4e:	bf00      	nop
 8003e50:	20008174 	.word	0x20008174

08003e54 <_isatty_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	4d06      	ldr	r5, [pc, #24]	; (8003e70 <_isatty_r+0x1c>)
 8003e58:	2300      	movs	r3, #0
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	f7fd fc51 	bl	8001706 <_isatty>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d102      	bne.n	8003e6e <_isatty_r+0x1a>
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	b103      	cbz	r3, 8003e6e <_isatty_r+0x1a>
 8003e6c:	6023      	str	r3, [r4, #0]
 8003e6e:	bd38      	pop	{r3, r4, r5, pc}
 8003e70:	20008174 	.word	0x20008174

08003e74 <_lseek_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d07      	ldr	r5, [pc, #28]	; (8003e94 <_lseek_r+0x20>)
 8003e78:	4604      	mov	r4, r0
 8003e7a:	4608      	mov	r0, r1
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	2200      	movs	r2, #0
 8003e80:	602a      	str	r2, [r5, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f7fd fc4a 	bl	800171c <_lseek>
 8003e88:	1c43      	adds	r3, r0, #1
 8003e8a:	d102      	bne.n	8003e92 <_lseek_r+0x1e>
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	b103      	cbz	r3, 8003e92 <_lseek_r+0x1e>
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	bd38      	pop	{r3, r4, r5, pc}
 8003e94:	20008174 	.word	0x20008174

08003e98 <__malloc_lock>:
 8003e98:	4801      	ldr	r0, [pc, #4]	; (8003ea0 <__malloc_lock+0x8>)
 8003e9a:	f7ff be0b 	b.w	8003ab4 <__retarget_lock_acquire_recursive>
 8003e9e:	bf00      	nop
 8003ea0:	20008168 	.word	0x20008168

08003ea4 <__malloc_unlock>:
 8003ea4:	4801      	ldr	r0, [pc, #4]	; (8003eac <__malloc_unlock+0x8>)
 8003ea6:	f7ff be06 	b.w	8003ab6 <__retarget_lock_release_recursive>
 8003eaa:	bf00      	nop
 8003eac:	20008168 	.word	0x20008168

08003eb0 <_read_r>:
 8003eb0:	b538      	push	{r3, r4, r5, lr}
 8003eb2:	4d07      	ldr	r5, [pc, #28]	; (8003ed0 <_read_r+0x20>)
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	4608      	mov	r0, r1
 8003eb8:	4611      	mov	r1, r2
 8003eba:	2200      	movs	r2, #0
 8003ebc:	602a      	str	r2, [r5, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f7fd fbe8 	bl	8001694 <_read>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	d102      	bne.n	8003ece <_read_r+0x1e>
 8003ec8:	682b      	ldr	r3, [r5, #0]
 8003eca:	b103      	cbz	r3, 8003ece <_read_r+0x1e>
 8003ecc:	6023      	str	r3, [r4, #0]
 8003ece:	bd38      	pop	{r3, r4, r5, pc}
 8003ed0:	20008174 	.word	0x20008174

08003ed4 <_init>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	bf00      	nop
 8003ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eda:	bc08      	pop	{r3}
 8003edc:	469e      	mov	lr, r3
 8003ede:	4770      	bx	lr

08003ee0 <_fini>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	bf00      	nop
 8003ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee6:	bc08      	pop	{r3}
 8003ee8:	469e      	mov	lr, r3
 8003eea:	4770      	bx	lr
